{
    "docs": [
        {
            "location": "/",
            "text": "electron-builder \n \n\u00b6\n\n\nA complete solution to package and build a ready for distribution Electron app for macOS, Windows and Linux with \u201cauto update\u201d support out of the box.\n\n\n\n\nNPM packages management:\n\n\nNative application dependencies\n compilation (including \nYarn\n support).\n\n\nDevelopment dependencies are never included. You don\u2019t need to ignore them explicitly.\n\n\nTwo package.json structure\n is supported, but you are not forced to use it even if you have native production dependencies.\n\n\n\n\n\n\nCode Signing\n on a CI server or development machine.\n\n\nAuto Update\n ready application packaging.\n\n\nNumerous target formats:\n\n\nAll platforms: \n7z\n, \nzip\n, \ntar.xz\n, \ntar.lz\n, \ntar.gz\n, \ntar.bz2\n, \ndir\n (unpacked directory).\n\n\nmacOS\n: \ndmg\n, \npkg\n, \nmas\n, \nmas-dev\n.\n\n\nLinux\n: \nAppImage\n, \nsnap\n, debian package (\ndeb\n), \nrpm\n, \nfreebsd\n, \npacman\n, \np5p\n, \napk\n.\n\n\nWindows\n: \nnsis\n (Installer), \nnsis-web\n (Web installer), \nportable\n (portable app without installation), AppX (Windows Store), Squirrel.Windows.\n\n\n\n\n\n\nBuild version management\n.\n\n\nPublishing artifacts\n to GitHub Releases, Amazon S3, DigitalOcean Spaces and Bintray.\n\n\nAdvanced building:\n\n\nPack in a distributable format \nalready packaged app\n.\n\n\nSeparate \nbuild steps\n.\n\n\nBuild and publish in parallel, using hard links on CI server to reduce IO and disk space usage.\n\n\n\n\n\n\nelectron-compile\n support (compile for release-time on the fly on build).\n\n\nDocker\n images to build Electron app for Linux or Windows on any platform.\n\n\nProton Native\n and \nMuon\n support.\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\nAnswer\n\n\n\n\n\n\n\n\n\n\n\u201cI want to configure electron-builder\u201d\n\n\nSee options\n\n\n\n\n\n\n\u201cI have a question\u201d\n\n\nOpen an issue\n or \njoin the chat\n\n\n\n\n\n\n\u201cI found a bug\u201d\n\n\nOpen an issue\n\n\n\n\n\n\n\u201cI want to support development\u201d\n\n\nDonate\n\n\n\n\n\n\n\n\nReal project example \u2014 \nonshape-desktop-shell\n.\n\n\nInstallation\n\u00b6\n\n\nYarn\n is \nstrongly\n recommended instead of npm.\n\n\nyarn add electron-builder --dev\n\n\nBoilerplates\n\u00b6\n\n\n\n\nelectron-webpack-quick-start\n \u2014 A bare minimum project structure to get started developing with \nelectron-webpack\n. Recommended.\n\n\nelectron-react-boilerplate\n A boilerplate for scalable cross-platform desktop apps.\n\n\nelectron-react-redux-boilerplate\n A minimal boilerplate to get started with Electron, React and Redux.\n\n\nelectron-boilerplate\n A minimalistic yet comprehensive boilerplate application.\n\n\nVue CLI 3 plugin for Electron\n A Vue CLI 3 plugin for Electron with no required configuration.\n\n\n\n\nQuick Setup Guide\n\u00b6\n\n\nelectron-webpack-quick-start\n is a recommended way to create a new Electron application.\n\n\n\n\n\n\nSpecify the standard fields in the application \npackage.json\n \u2014 \nname\n, \ndescription\n, \nversion\n and \nauthor\n.\n\n\n\n\n\n\nSpecify the \nbuild\n configuration in the \npackage.json\n as follows:\n    \n\"build\"\n:\n \n{\n\n  \n\"appId\"\n:\n \n\"your.id\"\n,\n\n  \n\"mac\"\n:\n \n{\n\n    \n\"category\"\n:\n \n\"your.app.category.type\"\n\n  \n}\n\n\n}\n\n\n\n   See \nall options\n.\n\n\n\n\n\n\nAdd \nicons\n.\n\n\n\n\n\n\nAdd the \nscripts\n key to the development \npackage.json\n:\n    \n\"scripts\"\n:\n \n{\n\n  \n\"pack\"\n:\n \n\"electron-builder --dir\"\n,\n\n  \n\"dist\"\n:\n \n\"electron-builder\"\n\n\n}\n\n\n\n    Then you can run \nyarn dist\n (to package in a distributable format (e.g. dmg, windows installer, deb package)) or \nyarn pack\n (only generates the package directory without really packaging it. This is useful for testing purposes).\n\n\nTo ensure your native dependencies are always matched electron version, simply add script \n\"postinstall\": \"electron-builder install-app-deps\"\n to your \npackage.json\n.\n\n\n\n\n\n\nIf you have native addons of your own that are part of the application (not as a dependency), set \nnodeGypRebuild\n to \ntrue\n.\n\n\n\n\n\n\nPlease note that everything is packaged into an asar archive \nby default\n.\n\n\nFor an app that will be shipped to production, you should sign your application. See \nWhere to buy code signing certificates\n.\n\n\nProgrammatic Usage\n\u00b6\n\n\nSee \nnode_modules/electron-builder/out/index.d.ts\n. Typings for TypeScript is provided.\n\n\n\"use strict\"\n\n\n\nconst\n \nbuilder\n \n=\n \nrequire\n(\n\"electron-builder\"\n)\n\n\nconst\n \nPlatform\n \n=\n \nbuilder\n.\nPlatform\n\n\n\n// Promise is returned\n\n\nbuilder\n.\nbuild\n({\n\n  \ntargets\n:\n \nPlatform\n.\nMAC\n.\ncreateTarget\n(),\n\n  \nconfig\n:\n \n{\n\n   \n\"//\"\n:\n \n\"build options, see https://goo.gl/QQXmcV\"\n\n  \n}\n\n\n})\n\n  \n.\nthen\n(()\n \n=>\n \n{\n\n    \n// handle result\n\n  \n})\n\n  \n.\ncatch\n((\nerror\n)\n \n=>\n \n{\n\n    \n// handle error\n\n  \n})\n\n\n\n\n\nPack Only in a Distributable Format\n\u00b6\n\n\nYou can use electron-builder only to pack your electron app in a AppImage, Snaps, Debian package, NSIS, macOS installer component package (\npkg\n) \nand other distributable formats.\n\n\n./node_modules/.bin/build --prepackaged <packed dir>\n\n\n\n\n--projectDir\n (the path to project directory) option also can be useful.\n\n\nDebug\n\u00b6\n\n\nSet the \nDEBUG\n environment variable to debug what electron-builder is doing:\n\nDEBUG\n=\nelectron-builder\n\n\n\n\n\ncmd\n\n\nOn \nWindows\n the environment variable is set using the set command.\n\nset\n \nDEBUG\n=\nelectron-builder\n\n\n\n\n\n\n\nPowerShell\n\n\nPowerShell uses different syntax to set environment variables.\n\n$env\n:DEBUG\n=\nelectron-builder\n\n\n\n\n\nCommunity\n\u00b6\n\n\nelectron-builder\n on Slack (please use \nthreads\n).\nPublic \narchive\n without registration.",
            "title": "Introduction"
        },
        {
            "location": "/#electron-builder",
            "text": "A complete solution to package and build a ready for distribution Electron app for macOS, Windows and Linux with \u201cauto update\u201d support out of the box.   NPM packages management:  Native application dependencies  compilation (including  Yarn  support).  Development dependencies are never included. You don\u2019t need to ignore them explicitly.  Two package.json structure  is supported, but you are not forced to use it even if you have native production dependencies.    Code Signing  on a CI server or development machine.  Auto Update  ready application packaging.  Numerous target formats:  All platforms:  7z ,  zip ,  tar.xz ,  tar.lz ,  tar.gz ,  tar.bz2 ,  dir  (unpacked directory).  macOS :  dmg ,  pkg ,  mas ,  mas-dev .  Linux :  AppImage ,  snap , debian package ( deb ),  rpm ,  freebsd ,  pacman ,  p5p ,  apk .  Windows :  nsis  (Installer),  nsis-web  (Web installer),  portable  (portable app without installation), AppX (Windows Store), Squirrel.Windows.    Build version management .  Publishing artifacts  to GitHub Releases, Amazon S3, DigitalOcean Spaces and Bintray.  Advanced building:  Pack in a distributable format  already packaged app .  Separate  build steps .  Build and publish in parallel, using hard links on CI server to reduce IO and disk space usage.    electron-compile  support (compile for release-time on the fly on build).  Docker  images to build Electron app for Linux or Windows on any platform.  Proton Native  and  Muon  support.      Question  Answer      \u201cI want to configure electron-builder\u201d  See options    \u201cI have a question\u201d  Open an issue  or  join the chat    \u201cI found a bug\u201d  Open an issue    \u201cI want to support development\u201d  Donate     Real project example \u2014  onshape-desktop-shell .",
            "title": "electron-builder"
        },
        {
            "location": "/#installation",
            "text": "Yarn  is  strongly  recommended instead of npm.  yarn add electron-builder --dev",
            "title": "Installation"
        },
        {
            "location": "/#boilerplates",
            "text": "electron-webpack-quick-start  \u2014 A bare minimum project structure to get started developing with  electron-webpack . Recommended.  electron-react-boilerplate  A boilerplate for scalable cross-platform desktop apps.  electron-react-redux-boilerplate  A minimal boilerplate to get started with Electron, React and Redux.  electron-boilerplate  A minimalistic yet comprehensive boilerplate application.  Vue CLI 3 plugin for Electron  A Vue CLI 3 plugin for Electron with no required configuration.",
            "title": "Boilerplates"
        },
        {
            "location": "/#quick-setup-guide",
            "text": "electron-webpack-quick-start  is a recommended way to create a new Electron application.    Specify the standard fields in the application  package.json  \u2014  name ,  description ,  version  and  author .    Specify the  build  configuration in the  package.json  as follows:\n     \"build\" :   { \n   \"appId\" :   \"your.id\" , \n   \"mac\" :   { \n     \"category\" :   \"your.app.category.type\" \n   }  }  \n   See  all options .    Add  icons .    Add the  scripts  key to the development  package.json :\n     \"scripts\" :   { \n   \"pack\" :   \"electron-builder --dir\" , \n   \"dist\" :   \"electron-builder\"  }  \n    Then you can run  yarn dist  (to package in a distributable format (e.g. dmg, windows installer, deb package)) or  yarn pack  (only generates the package directory without really packaging it. This is useful for testing purposes).  To ensure your native dependencies are always matched electron version, simply add script  \"postinstall\": \"electron-builder install-app-deps\"  to your  package.json .    If you have native addons of your own that are part of the application (not as a dependency), set  nodeGypRebuild  to  true .    Please note that everything is packaged into an asar archive  by default .  For an app that will be shipped to production, you should sign your application. See  Where to buy code signing certificates .",
            "title": "Quick Setup Guide"
        },
        {
            "location": "/#programmatic-usage",
            "text": "See  node_modules/electron-builder/out/index.d.ts . Typings for TypeScript is provided.  \"use strict\"  const   builder   =   require ( \"electron-builder\" )  const   Platform   =   builder . Platform  // Promise is returned  builder . build ({ \n   targets :   Platform . MAC . createTarget (), \n   config :   { \n    \"//\" :   \"build options, see https://goo.gl/QQXmcV\" \n   }  }) \n   . then (()   =>   { \n     // handle result \n   }) \n   . catch (( error )   =>   { \n     // handle error \n   })",
            "title": "Programmatic Usage"
        },
        {
            "location": "/#pack-only-in-a-distributable-format",
            "text": "You can use electron-builder only to pack your electron app in a AppImage, Snaps, Debian package, NSIS, macOS installer component package ( pkg ) \nand other distributable formats.  ./node_modules/.bin/build --prepackaged <packed dir>  --projectDir  (the path to project directory) option also can be useful.",
            "title": "Pack Only in a Distributable Format"
        },
        {
            "location": "/#debug",
            "text": "Set the  DEBUG  environment variable to debug what electron-builder is doing: DEBUG = electron-builder   cmd  On  Windows  the environment variable is set using the set command. set   DEBUG = electron-builder    PowerShell  PowerShell uses different syntax to set environment variables. $env :DEBUG = electron-builder",
            "title": "Debug"
        },
        {
            "location": "/#community",
            "text": "electron-builder  on Slack (please use  threads ).\nPublic  archive  without registration.",
            "title": "Community"
        },
        {
            "location": "/cli/",
            "text": "Execute \n./node_modules/.bin/electron-builder --help\n (\nnode_modules/.bin/electron-builder build --help\n for \nbuild\n subcommand) to get the actual CLI usage guide.\n\n\n\n\nTip\n\n\nSince Node.js 8 \nnpx\n is bundled, so, you can simply use \nnpx electron-builder\n.\n\n\n\n\nCommands:\n  electron-builder build                    Build                      [default]\n  electron-builder install-app-deps         Install app deps\n  electron-builder node-gyp-rebuild         Rebuild own native code\n  electron-builder create-self-signed-cert  Create self-signed code signing cert\n                                            for Windows apps\n  electron-builder start                    Run application in a development\n                                            mode using electron-webpack\n\nBuilding:\n  --mac, -m, -o, --macos   Build for macOS, accepts target list (see\n                           https://goo.gl/5uHuzj).                       [array]\n  --linux, -l              Build for Linux, accepts target list (see\n                           https://goo.gl/4vwQad)                        [array]\n  --win, -w, --windows     Build for Windows, accepts target list (see\n                           https://goo.gl/jYsTEJ)                        [array]\n  --x64                    Build for x64                               [boolean]\n  --ia32                   Build for ia32                              [boolean]\n  --armv7l                 Build for armv7l                            [boolean]\n  --arm64                  Build for arm64                             [boolean]\n  --dir                    Build unpacked dir. Useful to test.         [boolean]\n  --prepackaged, --pd      The path to prepackaged app (to pack in a\n                           distributable format)\n  --projectDir, --project  The path to project directory. Defaults to current\n                           working directory.\n  --config, -c             The path to an electron-builder config. Defaults to\n                           `electron-builder.yml` (or `json`, or `json5`), see\n                           https://goo.gl/YFRJOM\n\nPublishing:\n  --publish, -p  Publish artifacts (to GitHub Releases), see\n                 https://goo.gl/tSFycD\n                [choices: \"onTag\", \"onTagOrDraft\", \"always\", \"never\", undefined]\n\nDeprecated:\n  --draft       Please set releaseType in the GitHub publish options instead\n                                                                       [boolean]\n  --prerelease  Please set releaseType in the GitHub publish options instead\n                                                                       [boolean]\n  --platform    The target platform (preferred to use --mac, --win or --linux)\n           [choices: \"mac\", \"win\", \"linux\", \"darwin\", \"win32\", \"all\", undefined]\n  --arch        The target arch (preferred to use --x64 or --ia32)\n                   [choices: \"ia32\", \"x64\", \"armv7l\", \"arm64\", \"all\", undefined]\n\nOther:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n\nExamples:\n  electron-builder -mwl                        build for macOS, Windows and Linux\n  electron-builder --linux deb tar.xz          build deb and tar.xz for Linux\n   electron-builder                          set package.json property `foo` to\n    -c.extraMetadata.foo=bar                  `bar`\n    electron-builder                          configure unicode options for NSIS\n    --config.nsis.unicode=false\n\n\n\n\nFor other commands please see help using \n--help\n arg, e.g. \n./node_modules/.bin/electron-builder install-app-deps --help",
            "title": "Command Line Interface (CLI)"
        },
        {
            "location": "/api/electron-builder/",
            "text": "Developer API only. See \nConfiguration\n for user documentation.\n\n\n\n\n\n\n\nelectron-builder\n\u00b6\n\n\n\n\nelectron-builder\n\n\n.Arch\n : \nenum\n\n\n.build(rawOptions)\n \u21d2 \nPromise<Array<String>>\n\n\n.createTargets(platforms, type, arch)\n \u21d2 \nMap<Platform | Map<\nArch\n | Array<String>>>\n\n\n\n\n\n\n\n\n\n\nelectron-builder.Arch\n : \nenum\n\u00b6\n\n\nKind\n: enum of \nelectron-builder\n\n\nProperties\n\n\n \nia32\n \n\n \nx64\n \n\n \narmv7l\n \n\n \narm64\n \n\n\n\n\nelectron-builder.build(rawOptions)\n \u21d2 \nPromise<Array<String>>\n\u00b6\n\n\nKind\n: method of \nelectron-builder\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\n\n\n\n\n\n\n\n\nrawOptions\n\n\nCliOptions\n\n\n\n\n\n\n\n\n\n\nelectron-builder.createTargets(platforms, type, arch)\n \u21d2 \nMap<Platform | Map<\nArch\n | Array<String>>>\n\u00b6\n\n\nKind\n: method of \nelectron-builder\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\n\n\n\n\n\n\n\n\nplatforms\n\n\nArray<Platform>\n\n\n\n\n\n\ntype\n\n\nString\n | \nnull\n\n\n\n\n\n\narch\n\n\nString\n | \nnull",
            "title": "Programmatic API"
        },
        {
            "location": "/api/electron-builder/#electron-builder",
            "text": "electron-builder  .Arch  :  enum  .build(rawOptions)  \u21d2  Promise<Array<String>>  .createTargets(platforms, type, arch)  \u21d2  Map<Platform | Map< Arch  | Array<String>>>",
            "title": "electron-builder"
        },
        {
            "location": "/api/electron-builder/#electron-builderarch-enum",
            "text": "Kind : enum of  electron-builder  Properties    ia32     x64     armv7l     arm64",
            "title": "electron-builder.Arch : enum"
        },
        {
            "location": "/api/electron-builder/#electron-builderbuildrawoptions-promisearraystring",
            "text": "Kind : method of  electron-builder     Param  Type      rawOptions  CliOptions",
            "title": "electron-builder.build(rawOptions) \u21d2 Promise&lt;Array&lt;String&gt;&gt;"
        },
        {
            "location": "/api/electron-builder/#electron-buildercreatetargetsplatforms-type-arch-mapplatform-124-maparch-124-arraystring",
            "text": "Kind : method of  electron-builder     Param  Type      platforms  Array<Platform>    type  String  |  null    arch  String  |  null",
            "title": "electron-builder.createTargets(platforms, type, arch) \u21d2 Map&lt;Platform | Map&lt;Arch | Array&lt;String&gt;&gt;&gt;"
        },
        {
            "location": "/hooks/",
            "text": "Node.js 8\n\n\nAll examples assumed that you use latest Node.js 8.11.x or higher.\n\n\n\n\nafterPack\n\u00b6\n\n\nThe function (or path to file or module id) to be run after pack (but before pack into distributable format and sign).\n\n\n(\ncontext\n: \nAfterPackContext\n)\n:\n \nPromise\n<\nany\n>\n \n|\n \nstring\n \n|\n \nnull\n\n\n\n\n\n\n\nAs function\n\n\nafterPack\n:\n \nasync\n \n(\ncontext\n)\n \n=>\n \n{\n\n  \n// your code\n\n\n}\n\n\n\n\n\n\n\nBecause in a configuration file you cannot use JavaScript, can be specified as a path to file or module id. Function must be exported as default export.\n\n\n\"build\"\n:\n \n{\n\n  \n\"afterPack\"\n:\n \n\"./myAfterPackHook.js\"\n\n\n}\n\n\n\n\n\nFile \nmyAfterPackHook.js\n in the project root directory:\n\n\n\n\nmyAfterPackHook.js\n\n\nexports\n.\ndefault\n \n=\n \nasync\n \nfunction\n(\ncontext\n)\n \n{\n\n  \n// your custom code\n\n\n}\n\n\n\n\n\n\n\nafterSign\n\u00b6\n\n\nThe function (or path to file or module id) to be run after pack and sign (but before pack into distributable format).\n\n\n(\ncontext\n: \nAfterPackContext\n)\n:\n \nPromise\n<\nany\n>\n \n|\n \nstring\n \n|\n \nnull\n\n\n\n\n\nConfiguration in the same way as \nafterPack\n (see above).\n\n\n\n\nAfterPackContext\n\u00b6\n\n\ninterface\n \nAfterPackContext\n \n{\n\n  \noutDir\n: \nstring\n\n  \nappOutDir\n: \nstring\n\n  \npackager\n: \nPlatformPackager\n<\nany\n>\n\n  \nelectronPlatformName\n: \nstring\n\n  \narch\n: \nArch\n\n  \ntargets\n: \nArray\n<\nTarget\n>\n\n\n}",
            "title": "Hooks"
        },
        {
            "location": "/hooks/#afterpack",
            "text": "The function (or path to file or module id) to be run after pack (but before pack into distributable format and sign).  ( context :  AfterPackContext ) :   Promise < any >   |   string   |   null    As function  afterPack :   async   ( context )   =>   { \n   // your code  }    Because in a configuration file you cannot use JavaScript, can be specified as a path to file or module id. Function must be exported as default export.  \"build\" :   { \n   \"afterPack\" :   \"./myAfterPackHook.js\"  }   File  myAfterPackHook.js  in the project root directory:   myAfterPackHook.js  exports . default   =   async   function ( context )   { \n   // your custom code  }",
            "title": "afterPack"
        },
        {
            "location": "/hooks/#aftersign",
            "text": "The function (or path to file or module id) to be run after pack and sign (but before pack into distributable format).  ( context :  AfterPackContext ) :   Promise < any >   |   string   |   null   Configuration in the same way as  afterPack  (see above).",
            "title": "afterSign"
        },
        {
            "location": "/hooks/#afterpackcontext",
            "text": "interface   AfterPackContext   { \n   outDir :  string \n   appOutDir :  string \n   packager :  PlatformPackager < any > \n   electronPlatformName :  string \n   arch :  Arch \n   targets :  Array < Target >  }",
            "title": "AfterPackContext"
        },
        {
            "location": "/donate/",
            "text": "We do this open source work in our free time. If you\u2019d like us to invest more time on it, please donate. Donation can be used to increase some issue priority.\n\n\nDonate with \nDonorbox\n, \nPayPal\n or \nBitcoin\n.\n\n\nDonorbox\n\u00b6\n\n\n\n\n\n\n\n\nBitcoin\n\u00b6\n\n\nBitcoin payment is anonymous \u2014 you can send comment to develar@gmail.com.\n\n\n\n\n1BRTzBynSWhPNbdWfw6FH5LYreaFcrXooP",
            "title": "Donate"
        },
        {
            "location": "/donate/#donorbox",
            "text": "",
            "title": "Donorbox"
        },
        {
            "location": "/donate/#bitcoin",
            "text": "Bitcoin payment is anonymous \u2014 you can send comment to develar@gmail.com.   1BRTzBynSWhPNbdWfw6FH5LYreaFcrXooP",
            "title": "Bitcoin"
        },
        {
            "location": "/configuration/configuration/",
            "text": "electron-builder \nconfiguration\n can be defined\n\n\n\n\nin the \npackage.json\n file of your project using the \nbuild\n key on the top level:\n   \n\"build\"\n:\n \n{\n\n  \n\"appId\"\n:\n \n\"com.example.app\"\n\n\n}\n\n\n\n\nor through the \n--config <path/to/yml-or-json5-or-toml>\n option (defaults to \nelectron-builder.yml\n (or \njson\n, or \njson5\n, or \ntoml\n)).\n   \nappId\n:\n \n\"com.example.app\"\n\n\n\n\n\n\n\n\nTip\n\n\nIf you want to use \ntoml\n, please install \nyarn add toml --dev\n.\n\n\n\n\nMost of the options accept \nnull\n \u2014 for example, to explicitly set that DMG icon must be default volume icon from the OS and default rules must be not applied (i.e. use application icon as DMG icon), set \ndmg.icon\n to \nnull\n.\n\n\nArtifact File Name Template\n\u00b6\n\n\n${ext}\n macro is supported in addition to \nfile macros\n.\n\n\nEnvironment Variables from File\n\u00b6\n\n\nEnv file \nelectron-builder.env\n in the current dir (\nexample\n). Supported only for CLI usage.\n\n\nHow to Read Docs\n\u00b6\n\n\n\n\nName of optional property is normal, \nrequired\n is bold.\n\n\nType is specified after property name: \nArray<String> | String\n. Union like this means that you can specify or string (\n**/*\n), or array of strings (\n[\"**/*\", \"!foo.js\"]\n).\n\n\n\n\nConfiguration\n\u00b6\n\n\n\n\n\n\n\nappId\n = \ncom.electron.${name}\n String - The application id. Used as \nCFBundleIdentifier\n for MacOS and as \nApplication User Model ID\n for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.\n\n\nproductName\n String - As \nname\n, but allows you to specify a product name for your executable which contains spaces and other special characters not allowed in the \nname property\n.\n\n\ncopyright\n = \nCopyright \u00a9 year ${author}\n String - The human-readable copyright line for the app.\n\n\n\n\n\n\n\n\n\n\ndirectories\n\n\n\n\n\n\nbuildResources\n = \nbuild\n String - The path to build resources.\n\n\nPlease note \u2014 build resources is not packed into the app. If you need to use some files, e.g. as tray icon, please include required files explicitly: \n\"files\": [\"**/*\", \"build/icon.*\"]\n\n\n\n\n\n\noutput\n = \ndist\n String - The output directory. \nFile macros\n are supported.\n\n\n\n\napp\n String - The application directory (containing the application package.json), defaults to \napp\n, \nwww\n or working directory.\n\n\n\n\n\n\n\n\n\n\n\n\nmac\n \nMacConfiguration\n - Options related to how build macOS targets.\n\n\nmas\n \nMasConfiguration\n - MAS (Mac Application Store) options.\n\n\ndmg\n \nDmgOptions\n - macOS DMG options.\n\n\npkg\n \nPkgOptions\n - macOS PKG options.\n\n\n\n\n\n\n\n\nwin\n \nWindowsConfiguration\n - Options related to how build Windows targets.\n\n\nnsis\n \nNsisOptions\n\n\n\n\nnsisWeb\n - Web Installer options.\n    Inherits \nNsisOptions\n options.\n\n\n\n\n\n\nappPackageUrl\n String - The application package download URL. Optional \u2014 by default computed using publish configuration.\n\n\nURL like \nhttps://example.com/download/latest\n allows web installer to be version independent (installer will download latest application package). Please note \u2014 it is \nfull URL\n.\n\n\nCustom \nX-Arch\n http header is set to \n32\n or \n64\n.\n\n\n\n\n\n\nartifactName\n String - The \nartifact file name template\n. Defaults to \n${productName} Web Setup ${version}.${ext}\n.\n\n\n\n\nportable\n - Portable options.\n\n\nrequestExecutionLevel\n = \nuser\n \u201cuser\u201d | \u201chighest\u201d | \u201cadmin\u201d - The \nrequested execution level\n for Windows.\n\n\nappx\n \nAppXOptions\n\n\nsquirrelWindows\n \nSquirrelWindowsOptions\n\n\n\n\n\n\n\n\n\n\n\n\nlinux\n \nLinuxConfiguration\n - Options related to how build Linux targets.\n\n\ndeb\n \nDebOptions\n - Debian package options.\n\n\nsnap\n \nSnapOptions\n - Snap options.\n\n\nappImage\n \nAppImageOptions\n - AppImage options.\n\n\npacman\n \nLinuxTargetSpecificOptions\n\n\nrpm\n \nLinuxTargetSpecificOptions\n\n\nfreebsd\n \nLinuxTargetSpecificOptions\n\n\np5p\n \nLinuxTargetSpecificOptions\n\n\napk\n \nLinuxTargetSpecificOptions\n\n\n\n\n\n\n\n\nbuildDependenciesFromSource\n = \nfalse\n Boolean - Whether to build the application native dependencies from source.\n\n\n\n\nnodeGypRebuild\n = \nfalse\n Boolean - Whether to execute \nnode-gyp rebuild\n before starting to package the app.\n\n\nDon\u2019t \nuse\n \nnpm\n (neither \n.npmrc\n) for configuring electron headers. Use \nelectron-builder node-gyp-rebuild\n instead.\n\n\n\n\n\n\nnpmArgs\n Array<String> | String - Additional command line arguments to use when installing app native deps.\n\n\n\n\nnpmRebuild\n = \ntrue\n Boolean - Whether to \nrebuild\n native dependencies before starting to package the app.\n\n\n\n\n\n\n\n\nbuildVersion\n String - The build version. Maps to the \nCFBundleVersion\n on macOS, and \nFileVersion\n metadata property on Windows. Defaults to the \nversion\n. If \nTRAVIS_BUILD_NUMBER\n or \nAPPVEYOR_BUILD_NUMBER\n or \nCIRCLE_BUILD_NUM\n or \nBUILD_NUMBER\n or \nbamboo.buildNumber\n env defined, it will be used as a build version (\nversion.build_number\n).\n\n\nelectronCompile\n Boolean - Whether to use \nelectron-compile\n to compile app. Defaults to \ntrue\n if \nelectron-compile\n in the dependencies. And \nfalse\n if in the \ndevDependencies\n or doesn\u2019t specified.\n\n\nelectronDist\n String - The path to custom Electron build (e.g. \n~/electron/out/R\n).\n\n\nelectronDownload\n - The \nelectron-download\n options.\n\n\nversion\n String\n\n\ncache\n String - The \ncache location\n.\n\n\nmirror\n String - The mirror.\n\n\nquiet\n Boolean\n\n\nstrictSSL\n Boolean\n\n\nisVerifyChecksum\n Boolean\n\n\nplatform\n \u201cdarwin\u201d | \u201clinux\u201d | \u201cwin32\u201d | \u201cmas\u201d\n\n\narch\n String\n\n\n\n\n\n\nelectronVersion\n String - The version of electron you are packaging for. Defaults to version of \nelectron\n, \nelectron-prebuilt\n or \nelectron-prebuilt-compile\n dependency.\n\n\n\n\nextends\n String - The name of a built-in configuration preset or path to config file (relative to project dir). Currently, only \nreact-cra\n is supported.\n\n\nIf \nreact-scripts\n in the app dependencies, \nreact-cra\n will be set automatically. Set to \nnull\n to disable automatic detection.\n\n\n\n\n\n\nextraMetadata\n any - Inject properties to \npackage.json\n.\n\n\n\n\nreadonly\n = \nfalse\n Boolean - Whether to fail if the application is not signed (to prevent unsigned app if code signing configuration is not correct).\n\n\nmuonVersion\n String - The version of muon you are packaging for.\n\n\nprotonNodeVersion\n String - \nProton Native only\n The version of NodeJS you are packaging for. You can set it to \ncurrent\n to set the Node.js version that you use to run electron-builder.\n\n\n\n\n\n\n\n\nafterPack\n (context: AfterPackContext) => Promise | null - The function (or path to file or module id) to be run after pack (but before pack into distributable format and sign). See \nexample\n.\n\n\n\n\n\n\n\n\nafterSign\n (context: AfterPackContext) => Promise | null - The function (or path to file or module id) to be run after pack and sign (but before pack into distributable format). See \nexample\n.\n\n\nonNodeModuleFile\n module:electron-builder-lib/out/configuration.__type | String - The function (or path to file or module id) to be run on each node module file.\n\n\n\n\nbeforeBuild\n (context: BeforeBuildContext) => Promise | null - The function (or path to file or module id) to be run before dependencies are installed or rebuilt. Works when \nnpmRebuild\n is set to \ntrue\n. Resolving to \nfalse\n will skip dependencies install or rebuild.\n\n\nIf provided and \nnode_modules\n are missing, it will not invoke production dependencies check.\n\n\n\n\n\n\nremoteBuild\n = \ntrue\n Boolean - Whether to build using Electron Build Service if target not supported on current OS.\n\n\n\n\nincludePdb\n = \nfalse\n Boolean - Whether to include PDB files.\n\n\nremovePackageScripts\n = \ntrue\n Boolean - Whether to remove \nscripts\n field from \npackage.json\n files.\n\n\n\n\n\n\n\nFollowing options can be set also per platform (top-level keys \nmac\n, \nlinux\n and \nwin\n).\n\n\n\n\nartifactName\n String - The \nartifact file name template\n. Defaults to \n${productName}-${version}.${ext}\n (some target can have other defaults, see corresponding options).\n\n\ncompression\n = \nnormal\n \u201cstore\u201d | \u201cnormal\u201d | \u201cmaximum\u201d - The compression level. If you want to rapidly test build, \nstore\n can reduce build time significantly. \nmaximum\n doesn\u2019t lead to noticeable size difference, but increase build time.\n\n\nfiles\n The \nfiles\n configuration.\n\n\nextraResources\n The \nextra resources\n configuration.\n\n\nextraFiles\n The \nextra files\n configuration.\n\n\n\n\nasar\n = \ntrue\n AsarOptions | Boolean\n - Whether to package the application\u2019s source code into an archive, using \nElectron\u2019s archive format\n.\n\n\nNode modules, that must be unpacked, will be detected automatically, you don\u2019t need to explicitly set \nasarUnpack\n - please file an issue if this doesn\u2019t work.\n\n\n\n\nsmartUnpack\n = \ntrue\n Boolean - Whether to automatically unpack executables files.\n\n\nordering\n String\n\n\nasarUnpack\n Array<String> | String - A \nglob patterns\n relative to the \napp directory\n, which specifies which files to unpack when creating the \nasar\n archive.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfileAssociations\n Array<FileAssociation> | FileAssociation\n - The file associations.\n\n\n\n\next\n String | Array<String> - The extension (minus the leading period). e.g. \npng\n.\n\n\nname\n String - The name. e.g. \nPNG\n. Defaults to \next\n.\n\n\ndescription\n String - \nwindows-only.\n The description.\n\n\nmimeType\n String - \nlinux-only.\n The mime-type.\n\n\n\n\nicon\n String - The path to icon (\n.icns\n for MacOS and \n.ico\n for Windows), relative to \nbuild\n (build resources directory). Defaults to \n${firstExt}.icns\n/\n${firstExt}.ico\n (if several extensions specified, first is used) or to application icon.\n\n\nNot supported on Linux, file issue if need (default icon will be \nx-office-document\n).\n\n\n\n\n\n\nrole\n = \nEditor\n String - \nmacOS-only\n The app\u2019s role with respect to the type. The value can be \nEditor\n, \nViewer\n, \nShell\n, or \nNone\n. Corresponds to \nCFBundleTypeRole\n.\n\n\n\n\nisPackage\n Boolean - \nmacOS-only\n Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to \nLSTypeIsPackage\n.\n\n\nprotocols\n Array<Protocol> | Protocol\n - The URL protocol schemes.\n\n\nname\n String - The name. e.g. \nIRC server URL\n.\n\n\nschemes\n Array<String> - The schemes. e.g. \n[\"irc\", \"ircs\"]\n.\n\n\nrole\n = \nEditor\n \u201cEditor\u201d | \u201cViewer\u201d | \u201cShell\u201d | \u201cNone\u201d - \nmacOS-only\n The app\u2019s role with respect to the type.\n\n\n\n\n\n\n\n\n\n\n\n\nforceCodeSigning\n Boolean\n\n\npublish\n The \npublish\n options.\n\n\ndetectUpdateChannel\n = \ntrue\n Boolean - Whether to infer update channel from application version pre-release components. e.g. if version \n0.12.1-alpha.1\n, channel will be set to \nalpha\n. Otherwise to \nlatest\n.\n\n\ngenerateUpdatesFilesForAllChannels\n = \nfalse\n Boolean - Please see \nBuilding and Releasing using Channels\n.\n\n\n\n\nreleaseInfo\n - The release info. Intended for command line usage:\n\n\n-c.releaseInfo.releaseNotes=\"new features\"\n\n\n\n\nreleaseName\n String - The release name.\n\n\nreleaseNotes\n String - The release notes.\n\n\nreleaseNotesFile\n String - The path to release notes file. Defaults to \nrelease-notes-${platform}.md\n (where \nplatform\n it is current platform \u2014 \nmac\n, \nlinux\n or \nwindows\n) or \nrelease-notes.md\n in the \nbuild resources\n.\n\n\nreleaseDate\n String - The release date.\n\n\ntarget\n String | [TargetConfiguration](/configuration/target.md#targetconfiguration\n\n\n\n\n\n\n\n\nMetadata\n\u00b6\n\n\nSome standard fields should be defined in the \npackage.json\n.\n\n\n\n\nname\n String - The application name.\n\n\ndescription\n String - The application description.\n\n\n\n\nhomepage\n String - The url to the project \nhomepage\n (NuGet Package \nprojectUrl\n (optional) or Linux Package URL (required)).\n\n\nIf not specified and your project repository is public on GitHub, it will be \nhttps://github.com/${user}/${project}\n by default.\n\n\n\n\n\n\nlicense\n String - \nlinux-only.\n The \nlicense\n name.\n\n\n\n\nauthor\n\n\nname\n String\n\n\nemail\n String\n\n\n\n\n\n\nrepository\n String | RepositoryInfo\n - The \nrepository\n.\n\n\nurl\n String\n\n\n\n\n\n\nbuild\n \nConfiguration\n - The electron-builder configuration\n\n\n\n\nProton Native\n\u00b6\n\n\nTo package \nProton Native\n app, set \nprotonNodeVersion\n option to \ncurrent\n or specific NodeJS version that you are packaging for.\nCurrently, only macOS and Linux supported.\n\n\nBuild Version Management\n\u00b6\n\n\nCFBundleVersion\n (macOS) and \nFileVersion\n (Windows) will be set automatically to \nversion.build_number\n on CI server (Travis, AppVeyor, CircleCI and Bamboo supported).",
            "title": "Common Configuration"
        },
        {
            "location": "/configuration/configuration/#artifact-file-name-template",
            "text": "${ext}  macro is supported in addition to  file macros .",
            "title": "Artifact File Name Template"
        },
        {
            "location": "/configuration/configuration/#environment-variables-from-file",
            "text": "Env file  electron-builder.env  in the current dir ( example ). Supported only for CLI usage.",
            "title": "Environment Variables from File"
        },
        {
            "location": "/configuration/configuration/#how-to-read-docs",
            "text": "Name of optional property is normal,  required  is bold.  Type is specified after property name:  Array<String> | String . Union like this means that you can specify or string ( **/* ), or array of strings ( [\"**/*\", \"!foo.js\"] ).",
            "title": "How to Read Docs"
        },
        {
            "location": "/configuration/configuration/#configuration",
            "text": "appId  =  com.electron.${name}  String - The application id. Used as  CFBundleIdentifier  for MacOS and as  Application User Model ID  for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.  productName  String - As  name , but allows you to specify a product name for your executable which contains spaces and other special characters not allowed in the  name property .  copyright  =  Copyright \u00a9 year ${author}  String - The human-readable copyright line for the app.      directories    buildResources  =  build  String - The path to build resources.  Please note \u2014 build resources is not packed into the app. If you need to use some files, e.g. as tray icon, please include required files explicitly:  \"files\": [\"**/*\", \"build/icon.*\"]    output  =  dist  String - The output directory.  File macros  are supported.   app  String - The application directory (containing the application package.json), defaults to  app ,  www  or working directory.       mac   MacConfiguration  - Options related to how build macOS targets.  mas   MasConfiguration  - MAS (Mac Application Store) options.  dmg   DmgOptions  - macOS DMG options.  pkg   PkgOptions  - macOS PKG options.     win   WindowsConfiguration  - Options related to how build Windows targets.  nsis   NsisOptions   nsisWeb  - Web Installer options.\n    Inherits  NsisOptions  options.    appPackageUrl  String - The application package download URL. Optional \u2014 by default computed using publish configuration.  URL like  https://example.com/download/latest  allows web installer to be version independent (installer will download latest application package). Please note \u2014 it is  full URL .  Custom  X-Arch  http header is set to  32  or  64 .    artifactName  String - The  artifact file name template . Defaults to  ${productName} Web Setup ${version}.${ext} .   portable  - Portable options.  requestExecutionLevel  =  user  \u201cuser\u201d | \u201chighest\u201d | \u201cadmin\u201d - The  requested execution level  for Windows.  appx   AppXOptions  squirrelWindows   SquirrelWindowsOptions       linux   LinuxConfiguration  - Options related to how build Linux targets.  deb   DebOptions  - Debian package options.  snap   SnapOptions  - Snap options.  appImage   AppImageOptions  - AppImage options.  pacman   LinuxTargetSpecificOptions  rpm   LinuxTargetSpecificOptions  freebsd   LinuxTargetSpecificOptions  p5p   LinuxTargetSpecificOptions  apk   LinuxTargetSpecificOptions     buildDependenciesFromSource  =  false  Boolean - Whether to build the application native dependencies from source.   nodeGypRebuild  =  false  Boolean - Whether to execute  node-gyp rebuild  before starting to package the app.  Don\u2019t  use   npm  (neither  .npmrc ) for configuring electron headers. Use  electron-builder node-gyp-rebuild  instead.    npmArgs  Array<String> | String - Additional command line arguments to use when installing app native deps.   npmRebuild  =  true  Boolean - Whether to  rebuild  native dependencies before starting to package the app.     buildVersion  String - The build version. Maps to the  CFBundleVersion  on macOS, and  FileVersion  metadata property on Windows. Defaults to the  version . If  TRAVIS_BUILD_NUMBER  or  APPVEYOR_BUILD_NUMBER  or  CIRCLE_BUILD_NUM  or  BUILD_NUMBER  or  bamboo.buildNumber  env defined, it will be used as a build version ( version.build_number ).  electronCompile  Boolean - Whether to use  electron-compile  to compile app. Defaults to  true  if  electron-compile  in the dependencies. And  false  if in the  devDependencies  or doesn\u2019t specified.  electronDist  String - The path to custom Electron build (e.g.  ~/electron/out/R ).  electronDownload  - The  electron-download  options.  version  String  cache  String - The  cache location .  mirror  String - The mirror.  quiet  Boolean  strictSSL  Boolean  isVerifyChecksum  Boolean  platform  \u201cdarwin\u201d | \u201clinux\u201d | \u201cwin32\u201d | \u201cmas\u201d  arch  String    electronVersion  String - The version of electron you are packaging for. Defaults to version of  electron ,  electron-prebuilt  or  electron-prebuilt-compile  dependency.   extends  String - The name of a built-in configuration preset or path to config file (relative to project dir). Currently, only  react-cra  is supported.  If  react-scripts  in the app dependencies,  react-cra  will be set automatically. Set to  null  to disable automatic detection.    extraMetadata  any - Inject properties to  package.json .   readonly  =  false  Boolean - Whether to fail if the application is not signed (to prevent unsigned app if code signing configuration is not correct).  muonVersion  String - The version of muon you are packaging for.  protonNodeVersion  String -  Proton Native only  The version of NodeJS you are packaging for. You can set it to  current  to set the Node.js version that you use to run electron-builder.     afterPack  (context: AfterPackContext) => Promise | null - The function (or path to file or module id) to be run after pack (but before pack into distributable format and sign). See  example .     afterSign  (context: AfterPackContext) => Promise | null - The function (or path to file or module id) to be run after pack and sign (but before pack into distributable format). See  example .  onNodeModuleFile  module:electron-builder-lib/out/configuration.__type | String - The function (or path to file or module id) to be run on each node module file.   beforeBuild  (context: BeforeBuildContext) => Promise | null - The function (or path to file or module id) to be run before dependencies are installed or rebuilt. Works when  npmRebuild  is set to  true . Resolving to  false  will skip dependencies install or rebuild.  If provided and  node_modules  are missing, it will not invoke production dependencies check.    remoteBuild  =  true  Boolean - Whether to build using Electron Build Service if target not supported on current OS.   includePdb  =  false  Boolean - Whether to include PDB files.  removePackageScripts  =  true  Boolean - Whether to remove  scripts  field from  package.json  files.    Following options can be set also per platform (top-level keys  mac ,  linux  and  win ).   artifactName  String - The  artifact file name template . Defaults to  ${productName}-${version}.${ext}  (some target can have other defaults, see corresponding options).  compression  =  normal  \u201cstore\u201d | \u201cnormal\u201d | \u201cmaximum\u201d - The compression level. If you want to rapidly test build,  store  can reduce build time significantly.  maximum  doesn\u2019t lead to noticeable size difference, but increase build time.  files  The  files  configuration.  extraResources  The  extra resources  configuration.  extraFiles  The  extra files  configuration.   asar  =  true  AsarOptions | Boolean  - Whether to package the application\u2019s source code into an archive, using  Electron\u2019s archive format .  Node modules, that must be unpacked, will be detected automatically, you don\u2019t need to explicitly set  asarUnpack  - please file an issue if this doesn\u2019t work.   smartUnpack  =  true  Boolean - Whether to automatically unpack executables files.  ordering  String  asarUnpack  Array<String> | String - A  glob patterns  relative to the  app directory , which specifies which files to unpack when creating the  asar  archive.        fileAssociations  Array<FileAssociation> | FileAssociation  - The file associations.   ext  String | Array<String> - The extension (minus the leading period). e.g.  png .  name  String - The name. e.g.  PNG . Defaults to  ext .  description  String -  windows-only.  The description.  mimeType  String -  linux-only.  The mime-type.   icon  String - The path to icon ( .icns  for MacOS and  .ico  for Windows), relative to  build  (build resources directory). Defaults to  ${firstExt}.icns / ${firstExt}.ico  (if several extensions specified, first is used) or to application icon.  Not supported on Linux, file issue if need (default icon will be  x-office-document ).    role  =  Editor  String -  macOS-only  The app\u2019s role with respect to the type. The value can be  Editor ,  Viewer ,  Shell , or  None . Corresponds to  CFBundleTypeRole .   isPackage  Boolean -  macOS-only  Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to  LSTypeIsPackage .  protocols  Array<Protocol> | Protocol  - The URL protocol schemes.  name  String - The name. e.g.  IRC server URL .  schemes  Array<String> - The schemes. e.g.  [\"irc\", \"ircs\"] .  role  =  Editor  \u201cEditor\u201d | \u201cViewer\u201d | \u201cShell\u201d | \u201cNone\u201d -  macOS-only  The app\u2019s role with respect to the type.       forceCodeSigning  Boolean  publish  The  publish  options.  detectUpdateChannel  =  true  Boolean - Whether to infer update channel from application version pre-release components. e.g. if version  0.12.1-alpha.1 , channel will be set to  alpha . Otherwise to  latest .  generateUpdatesFilesForAllChannels  =  false  Boolean - Please see  Building and Releasing using Channels .   releaseInfo  - The release info. Intended for command line usage:  -c.releaseInfo.releaseNotes=\"new features\"   releaseName  String - The release name.  releaseNotes  String - The release notes.  releaseNotesFile  String - The path to release notes file. Defaults to  release-notes-${platform}.md  (where  platform  it is current platform \u2014  mac ,  linux  or  windows ) or  release-notes.md  in the  build resources .  releaseDate  String - The release date.  target  String | [TargetConfiguration](/configuration/target.md#targetconfiguration",
            "title": "Configuration"
        },
        {
            "location": "/configuration/configuration/#metadata",
            "text": "Some standard fields should be defined in the  package.json .   name  String - The application name.  description  String - The application description.   homepage  String - The url to the project  homepage  (NuGet Package  projectUrl  (optional) or Linux Package URL (required)).  If not specified and your project repository is public on GitHub, it will be  https://github.com/${user}/${project}  by default.    license  String -  linux-only.  The  license  name.   author  name  String  email  String    repository  String | RepositoryInfo  - The  repository .  url  String    build   Configuration  - The electron-builder configuration",
            "title": "Metadata"
        },
        {
            "location": "/configuration/configuration/#proton-native",
            "text": "To package  Proton Native  app, set  protonNodeVersion  option to  current  or specific NodeJS version that you are packaging for.\nCurrently, only macOS and Linux supported.",
            "title": "Proton Native"
        },
        {
            "location": "/configuration/configuration/#build-version-management",
            "text": "CFBundleVersion  (macOS) and  FileVersion  (Windows) will be set automatically to  version.build_number  on CI server (Travis, AppVeyor, CircleCI and Bamboo supported).",
            "title": "Build Version Management"
        },
        {
            "location": "/configuration/contents/",
            "text": "files\n\u00b6\n\n\nArray<String | FileSet> | String | FileSet\n\n\nA \nglob patterns\n relative to the \napp directory\n, which specifies which files to include when copying files to create the package.\n\n\nDevelopment dependencies are never copied in any case. You don\u2019t need to ignore it explicitly.\n\n\nDefault pattern \n**/*\n \nis not added to your custom\n if some of your patterns is not ignore (i.e. not starts with \n!\n). \npackage.json\n and \n**/node_modules/**/*\n (only production dependencies will be copied) is added to your custom in any case. All \ndefault ignores\n are added in any case \u2014 you don\u2019t need to repeat it if you configure own patterns.\n\n\nMay be specified in the platform options (e.g. in the \nmac\n).\n\n\nYou may also specify custom source and destination directories by using \nFileSet\n objects instead of simple glob patterns.\n\n\n[\n\n  \n{\n\n    \n\"from\"\n:\n \n\"path/to/source\"\n,\n\n    \n\"to\"\n:\n \n\"path/to/destination\"\n,\n\n    \n\"filter\"\n:\n \n[\n\"**/*\"\n,\n \n\"!foo/*.js\"\n]\n\n  \n}\n\n\n]\n\n\n\n\n\nYou can use \nfile macros\n in the \nfrom\n and \nto\n fields as well. \nfrom\n and \nto\n can be files and you can use this to \nrename\n a file while packaging.\n\n\nFileSet.from\n\u00b6\n\n\nString\n\n\nThe source path relative to and defaults to:\n\n\n\n\nthe \napp directory\n for \nfiles\n,\n\n\nthe project directory for \nextraResources\n and \nextraFiles\n.\n\n\n\n\nIf you don\u2019t use two-package.json structure and don\u2019t set custom app directory, app directory equals to project directory.\n\n\nFileSet.to\n\u00b6\n\n\nString\n\n\nThe destination path relative to and defaults to: \n\n the asar archive root for \nfiles\n,\n\n the app\u2019s content directory for \nextraFiles\n,\n* the app\u2019s resource directory for \nextraResources\n.\n\n\nFileSet.filter\n\u00b6\n\n\nArray<String> | String\n\n\nThe \nglob patterns\n. Defaults to \n*/**\n.\n\n\nextraResources\n\u00b6\n\n\nArray<String | FileSet> | String | FileSet\n\n\nA \nglob patterns\n relative to the project directory, when specified, copy the file or directory with matching names directly into the app\u2019s resources directory (\nContents/Resources\n for MacOS, \nresources\n for Linux and Windows).\n\n\nFile patterns (and support for \nfrom\n and \nto\n fields) the same as for \nfiles\n.\n\n\nextraFiles\n\u00b6\n\n\nArray<String | FileSet> | String | FileSet\n\n\nThe same as \nextraResources\n but copy into the app\u2019s content directory (\nContents\n for MacOS, root directory for Linux and Windows).",
            "title": "Application Contents"
        },
        {
            "location": "/configuration/contents/#files",
            "text": "Array<String | FileSet> | String | FileSet  A  glob patterns  relative to the  app directory , which specifies which files to include when copying files to create the package.  Development dependencies are never copied in any case. You don\u2019t need to ignore it explicitly.  Default pattern  **/*   is not added to your custom  if some of your patterns is not ignore (i.e. not starts with  ! ).  package.json  and  **/node_modules/**/*  (only production dependencies will be copied) is added to your custom in any case. All  default ignores  are added in any case \u2014 you don\u2019t need to repeat it if you configure own patterns.  May be specified in the platform options (e.g. in the  mac ).  You may also specify custom source and destination directories by using  FileSet  objects instead of simple glob patterns.  [ \n   { \n     \"from\" :   \"path/to/source\" , \n     \"to\" :   \"path/to/destination\" , \n     \"filter\" :   [ \"**/*\" ,   \"!foo/*.js\" ] \n   }  ]   You can use  file macros  in the  from  and  to  fields as well.  from  and  to  can be files and you can use this to  rename  a file while packaging.",
            "title": "files"
        },
        {
            "location": "/configuration/contents/#filesetfrom",
            "text": "String  The source path relative to and defaults to:   the  app directory  for  files ,  the project directory for  extraResources  and  extraFiles .   If you don\u2019t use two-package.json structure and don\u2019t set custom app directory, app directory equals to project directory.",
            "title": "FileSet.from"
        },
        {
            "location": "/configuration/contents/#filesetto",
            "text": "String  The destination path relative to and defaults to:   the asar archive root for  files ,  the app\u2019s content directory for  extraFiles ,\n* the app\u2019s resource directory for  extraResources .",
            "title": "FileSet.to"
        },
        {
            "location": "/configuration/contents/#filesetfilter",
            "text": "Array<String> | String  The  glob patterns . Defaults to  */** .",
            "title": "FileSet.filter"
        },
        {
            "location": "/configuration/contents/#extraresources",
            "text": "Array<String | FileSet> | String | FileSet  A  glob patterns  relative to the project directory, when specified, copy the file or directory with matching names directly into the app\u2019s resources directory ( Contents/Resources  for MacOS,  resources  for Linux and Windows).  File patterns (and support for  from  and  to  fields) the same as for  files .",
            "title": "extraResources"
        },
        {
            "location": "/configuration/contents/#extrafiles",
            "text": "Array<String | FileSet> | String | FileSet  The same as  extraResources  but copy into the app\u2019s content directory ( Contents  for MacOS, root directory for Linux and Windows).",
            "title": "extraFiles"
        },
        {
            "location": "/file-patterns/",
            "text": "*\n Matches 0 or more characters in a single path portion\n\n\n?\n Matches 1 character\n\n\n[...]\n Matches a range of characters, similar to a RegExp range.\n  If the first character of the range is \n!\n or \n^\n then it matches\n  any character not in the range.\n\n\n!(pattern|pattern|pattern)\n Matches anything that does not match\n  any of the patterns provided.\n\n\n?(pattern|pattern|pattern)\n Matches zero or one occurrence of the\n  patterns provided.\n\n\n+(pattern|pattern|pattern)\n Matches one or more occurrences of the\n  patterns provided.\n\n\n*(a|b|c)\n Matches zero or more occurrences of the patterns provided\n\n\n@(pattern|pat*|pat?erN)\n Matches exactly one of the patterns\n  provided\n\n\n**\n If a \u201cglobstar\u201d is alone in a path portion, then it matches\n  zero or more directories and subdirectories searching for matches.\n  It does not crawl symlinked directories.\n\n\n\n\nHidden files are not ignored by default, but all files that should be ignored, are \nignored by default\n.\n\n\nIf directory matched, all contents are copied. So, you can just specify \nfoo\n to copy \nfoo\n directory.\n\n\n\n\nExcluding directories\n\n\nRemember that \n!doNotCopyMe/**/*\n would match the files \nin\n the \ndoNotCopyMe\n directory, but not the directory itself, so the \nempty directory\n would be created.\nSolution \u2014 use macro \n${/*}\n, e.g. \n!doNotCopyMe${/*}\n.\n\n\n\n\nMultiple Glob Patterns\n\u00b6\n\n\n[\n\n  \n// match all files\n\n  \n\"**/*\"\n,\n\n\n  \n// except for js files in the foo/ directory\n\n  \n\"!foo/*.js\"\n,\n\n\n  \n// unless it's foo/bar.js\n\n  \n\"foo/bar.js\"\n,\n\n\n]\n\n\n\n\n\nFile Macros\n\u00b6\n\n\nYou can use macros in the file patterns, artifact file name patterns and publish configuration url:\n\n\n\n\n${arch}\n \u2014 expanded to \nia32\n, \nx64\n. If no \narch\n, macro will be removed from your pattern with leading space, \n-\n and \n_\n (so, you don\u2019t need to worry and can reuse pattern).\n\n\n${os}\n \u2014 expanded to \nmac\n, \nlinux\n or \nwin\n according to target platform.\n\n\n${platform}\n \u2014 expanded to \ndarwin\n, \nlinux\n or \nwin32\n according to Node.js \nprocess.platform\n property.\n\n\n${name}\n \u2013 \npackage.json\n \nname\n.\n\n\n${productName}\n \u2014 \nSanitized\n product name.\n\n\n${version}\n\n\n${channel}\n \u2014 detected prerelease component from version (e.g. \nbeta\n).\n\n\n${env.ENV_NAME}\n \u2014 any environment variable.\n\n\nAny property of \nAppInfo\n (e.g. \nbuildVersion\n, \nbuildNumber\n).\n\n\n\n\nDefault File Pattern\n\u00b6\n\n\nfiles\n defaults to:\n\n\n\n\n**/*\n\n\n!**/node_modules/*/{CHANGELOG.md,README.md,README,readme.md,readme,test,__tests__,tests,powered-test,example,examples,*.d.ts}\n\n\n!**/node_modules/.bin\n\n\n!**/*.{iml,o,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,xproj}\n\n\n!**/._*\n\n\n!.editorconfig\n\n\n!**/{.DS_Store,.git,.hg,.svn,CVS,RCS,SCCS,__pycache__,thumbs.db,.gitignore,.gitattributes,.flowconfig,.yarn-metadata.json,.idea,.vs,appveyor.yml,.travis.yml,circle.yml,npm-debug.log,.nyc_output,yarn.lock,.yarn-integrity}",
            "title": "File Patterns"
        },
        {
            "location": "/file-patterns/#multiple-glob-patterns",
            "text": "[ \n   // match all files \n   \"**/*\" , \n\n   // except for js files in the foo/ directory \n   \"!foo/*.js\" , \n\n   // unless it's foo/bar.js \n   \"foo/bar.js\" ,  ]",
            "title": "Multiple Glob Patterns"
        },
        {
            "location": "/file-patterns/#file-macros",
            "text": "You can use macros in the file patterns, artifact file name patterns and publish configuration url:   ${arch}  \u2014 expanded to  ia32 ,  x64 . If no  arch , macro will be removed from your pattern with leading space,  -  and  _  (so, you don\u2019t need to worry and can reuse pattern).  ${os}  \u2014 expanded to  mac ,  linux  or  win  according to target platform.  ${platform}  \u2014 expanded to  darwin ,  linux  or  win32  according to Node.js  process.platform  property.  ${name}  \u2013  package.json   name .  ${productName}  \u2014  Sanitized  product name.  ${version}  ${channel}  \u2014 detected prerelease component from version (e.g.  beta ).  ${env.ENV_NAME}  \u2014 any environment variable.  Any property of  AppInfo  (e.g.  buildVersion ,  buildNumber ).",
            "title": "File Macros"
        },
        {
            "location": "/file-patterns/#default-file-pattern",
            "text": "files  defaults to:   **/*  !**/node_modules/*/{CHANGELOG.md,README.md,README,readme.md,readme,test,__tests__,tests,powered-test,example,examples,*.d.ts}  !**/node_modules/.bin  !**/*.{iml,o,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,xproj}  !**/._*  !.editorconfig  !**/{.DS_Store,.git,.hg,.svn,CVS,RCS,SCCS,__pycache__,thumbs.db,.gitignore,.gitattributes,.flowconfig,.yarn-metadata.json,.idea,.vs,appveyor.yml,.travis.yml,circle.yml,npm-debug.log,.nyc_output,yarn.lock,.yarn-integrity}",
            "title": "Default File Pattern"
        },
        {
            "location": "/configuration/mac/",
            "text": "The top-level \nmac\n key contains set of options instructing electron-builder on how it should build macOS targets. These options applicable for any macOS target.\n\n\n\n\n\n\n\n\n\ncategory\n String - The application category type, as shown in the Finder via \nView -> Arrange by Application Category\n when viewing the Applications directory.\n\n\nFor example, \n\"category\": \"public.app-category.developer-tools\"\n will set the application category to \nDeveloper Tools\n.\n\n\nValid values are listed in \nApple\u2019s documentation\n.\n\n\n\n\n\n\ntarget\n String | \nTargetConfiguration\n - The target package type: list of \ndefault\n, \ndmg\n, \nmas\n, \nmas-dev\n, \npkg\n, \n7z\n, \nzip\n, \ntar.xz\n, \ntar.lz\n, \ntar.gz\n, \ntar.bz2\n, \ndir\n. Defaults to \ndefault\n (dmg and zip for Squirrel.Mac).\n\n\n\n\nidentity\n String - The name of certificate to use when signing. Consider using environment variables \nCSC_LINK or CSC_NAME\n instead of specifying this option. MAS installer identity is specified in the \nmas\n.\n\n\nicon\n = \nbuild/icon.icns\n String - The path to application icon.\n\n\nentitlements\n String - The path to entitlements file for signing the app. \nbuild/entitlements.mac.plist\n will be used if exists (it is a recommended way to set). MAS entitlements is specified in the \nmas\n.\n\n\n\n\nentitlementsInherit\n String - The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. \nbuild/entitlements.mac.inherit.plist\n will be used if exists (it is a recommended way to set). Otherwise \ndefault\n.\n\n\nThis option only applies when signing with \nentitlements\n provided.\n\n\n\n\n\n\nprovisioningProfile\n String - The path to the provisioning profile to use when signing, absolute or relative to the app root.\n\n\n\n\nbundleVersion\n String - The \nCFBundleVersion\n. Do not use it unless \nyou need to\n.\n\n\nbundleShortVersion\n String - The \nCFBundleShortVersionString\n. Do not use it unless you need to.\n\n\nhelperBundleId\n = \n${appBundleIdentifier}.helper\n String - The bundle identifier to use in the application helper\u2019s plist.\n\n\ntype\n = \ndistribution\n \u201cdistribution\u201d | \u201cdevelopment\u201d - Whether to sign app for development or for distribution.\n\n\nextendInfo\n any - The extra entries for \nInfo.plist\n.\n\n\nbinaries\n Array<String> - Paths of any extra binaries that need to be signed.\n\n\nminimumSystemVersion\n String - The minimum version of macOS required for the app to run. Corresponds to \nLSMinimumSystemVersion\n.\n\n\nrequirements\n String - Path of \nrequirements file\n used in signing. Not applicable for MAS.\n\n\n\n\nelectronUpdaterCompatibility\n String - The electron-updater compatibility semver range. e.g. \n>= 2.16\n, \n>=1.0.0\n. Defaults to \n>=1.0.0\n\n\n1.0.0 latest-mac.json 2.15.0 path 2.16.0 files\n\n\n\n\n\n\nelectronLanguages\n Array<String> | String - The electron locales. By default Electron locales used as is.",
            "title": "Any macOS Target"
        },
        {
            "location": "/configuration/dmg/",
            "text": "The top-level \ndmg\n key contains set of options instructing electron-builder on how it should build \nDMG\n.\n\n\n\n\n\n\n\nbackground\n String - The path to background image (default: \nbuild/background.tiff\n or \nbuild/background.png\n if exists). The resolution of this file determines the resolution of the installer window. If background is not specified, use \nwindow.size\n. Default locations expected background size to be 540x380. See: \nDMG with Retina background support\n.\n\n\nbackgroundColor\n String - The background color (accepts css colors). Defaults to \n#ffffff\n (white) if no background image.\n\n\nicon\n String - The path to DMG icon (volume icon), which will be shown when mounted, relative to the \nbuild resources\n or to the project directory. Defaults to the application icon (\nbuild/icon.icns\n).\n\n\niconSize\n = \n80\n Number - The size of all the icons inside the DMG.\n\n\niconTextSize\n = \n12\n Number - The size of all the icon texts inside the DMG.\n\n\n\n\ntitle\n = \n${productName} ${version}\n String - The title of the produced DMG, which will be shown when mounted (volume name).\n\n\nMacro \n${productName}\n, \n${version}\n and \n${name}\n are supported.\n\n\n\n\n\n\ncontents\n Array<DmgContent>\n - The content \u2014 to customize icon locations.\n\n\n\n\nx\n Number\n\n\ny\n Number\n\n\ntype\n \u201clink\u201d | \u201cfile\u201d | \u201cdir\u201d\n\n\nname\n String - The name of the file within the DMG. Defaults to basename of \npath\n.\n\n\npath\n String - The path of the file within the DMG.\n\n\n\n\n\n\nformat\n = \nUDZO\n \u201cUDRW\u201d | \u201cUDRO\u201d | \u201cUDCO\u201d | \u201cUDZO\u201d | \u201cUDBZ\u201d | \u201cULFO\u201d - The disk image format. \nULFO\n (lzfse-compressed image (OS X 10.11+ only)).\n\n\nwindow\n - The DMG windows position and size.\n\n\nx\n = \n400\n Number - The X position relative to left of the screen.\n\n\ny\n = \n100\n Number - The Y position relative to top of the screen.\n\n\nwidth\n Number - The width. Defaults to background image width or 540.\n\n\nheight\n Number - The height. Defaults to background image height or 380.\n\n\n\n\n\n\ninternetEnabled\n = \nfalse\n Boolean - Whether to create internet-enabled disk image (when it is downloaded using a browser it will automatically decompress the image, put the application on the desktop, unmount and remove the disk image file).\n\n\n\n\nInherited from \nTargetSpecificOptions\n:\n\n\n\n\nartifactName\n String - The \nartifact file name template\n.\n\n\npublish\n The \npublish\n options.\n\n\n\n\n\nDMG License\n\u00b6\n\n\nTo add license to DMG, create file \nlicense_LANG_CODE.txt\n in the build resources. Multiple license files in different languages are supported \u2014 use lang postfix (e.g. \n_de\n, \n_ru\n)). For example, create files \nlicense_de.txt\n and \nlicense_en.txt\n in the build resources.\nIf OS language is german, \nlicense_de.txt\n will be displayed. See map of \nlanguage code to name\n.\n\n\nYou can also change the default button labels of the DMG by passing a json file named \nlicenseButtons_LANG_CODE.json\n. The german file would be named: \nlicenseButtons_de.json\n.\nThe contain file should have the following format:\n\n{\n\n  \n\"lang\"\n:\n \n\"English\"\n,\n\n  \n\"agree\"\n:\n \n\"Agree\"\n,\n\n  \n\"disagree\"\n:\n \n\"Disagree\"\n,\n\n  \n\"print\"\n:\n \n\"Print\"\n,\n\n  \n\"save\"\n:\n \n\"Save\"\n,\n\n  \n\"description\"\n:\n \n\"Here is my own description\"\n\n\n}",
            "title": "DMG"
        },
        {
            "location": "/configuration/dmg/#dmg-license",
            "text": "To add license to DMG, create file  license_LANG_CODE.txt  in the build resources. Multiple license files in different languages are supported \u2014 use lang postfix (e.g.  _de ,  _ru )). For example, create files  license_de.txt  and  license_en.txt  in the build resources.\nIf OS language is german,  license_de.txt  will be displayed. See map of  language code to name .  You can also change the default button labels of the DMG by passing a json file named  licenseButtons_LANG_CODE.json . The german file would be named:  licenseButtons_de.json .\nThe contain file should have the following format: { \n   \"lang\" :   \"English\" , \n   \"agree\" :   \"Agree\" , \n   \"disagree\" :   \"Disagree\" , \n   \"print\" :   \"Print\" , \n   \"save\" :   \"Save\" , \n   \"description\" :   \"Here is my own description\"  }",
            "title": "DMG License"
        },
        {
            "location": "/configuration/mas/",
            "text": "The top-level \nmas\n key contains set of options instructing electron-builder on how it should build MAS (Mac Application Store) target.\nInherits \nmacOS options\n.\n\n\n\n\n\n\n\nentitlements\n String - The path to entitlements file for signing the app. \nbuild/entitlements.mas.plist\n will be used if exists (it is a recommended way to set). Otherwise \ndefault\n.\n\n\nentitlementsInherit\n String - The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. \nbuild/entitlements.mas.inherit.plist\n will be used if exists (it is a recommended way to set). Otherwise \ndefault\n.\n\n\nbinaries\n Array<String> - Paths of any extra binaries that need to be signed.",
            "title": "MAS"
        },
        {
            "location": "/configuration/pkg/",
            "text": "The top-level \npkg\n key contains set of options instructing electron-builder on how it should build \nPKG\n (macOS installer component package).\n\n\n\n\n\n\n\nscripts\n = \nbuild/pkg-scripts\n String - The scripts directory, relative to \nbuild\n (build resources directory). The scripts can be in any language so long as the files are marked executable and have the appropriate shebang indicating the path to the interpreter. Scripts are required to be executable (\nchmod +x file\n). See: \nScripting in installer packages\n.\n\n\ninstallLocation\n = \n/Applications\n String - The install location. \nDo not use it\n to create per-user package. Mostly never you will need to change this option. \n/Applications\n would install it as expected into \n/Applications\n if the local system domain is chosen, or into \n$HOME/Applications\n if the home installation is chosen.\n\n\n\n\nallowAnywhere\n = \ntrue\n Boolean - Whether can be installed at the root of any volume, including non-system volumes. Otherwise, it cannot be installed at the root of a volume.\n\n\nCorresponds to \nenable_anywhere\n.\n\n\n\n\n\n\nallowCurrentUserHome\n = \ntrue\n Boolean - Whether can be installed into the current user\u2019s home directory. A home directory installation is done as the current user (not as root), and it cannot write outside of the home directory. If the product cannot be installed in the user\u2019s home directory and be not completely functional from user\u2019s home directory.\n\n\nCorresponds to \nenable_currentUserHome\n.\n\n\n\n\n\n\nallowRootDirectory\n = \ntrue\n Boolean - Whether can be installed into the root directory. Should usually be \ntrue\n unless the product can be installed only to the user\u2019s home directory.\n\n\nCorresponds to \nenable_localSystem\n.\n\n\n\n\n\n\nidentity\n String - The name of certificate to use when signing. Consider using environment variables \nCSC_LINK or CSC_NAME\n instead of specifying this option.\n\n\n\n\nlicense\n String - The path to EULA license file. Defaults to \nlicense.txt\n or \neula.txt\n (or uppercase variants). In addition to \ntxt,\nrtf\nand\nhtml\nsupported (don't forget to use\ntarget=\u201d_blank\u201d` for links).\n\n\nisRelocatable\n = \ntrue\n Boolean - Install bundle over previous version if moved by user?\n\n\nisVersionChecked\n = \ntrue\n Boolean - Don\u2019t install bundle if newer version on disk?\n\n\nhasStrictIdentifier\n = \ntrue\n Boolean - Require identical bundle identifiers at install path?\n\n\n\n\noverwriteAction\n = \nupgrade\n \u201cupgrade\u201d | \u201cupdate\u201d - Specifies how an existing version of the bundle on disk should be handled when the version in the package is installed.\n\n\nIf you specify upgrade, the bundle in the package atomi-cally replaces any version on disk; this has the effect of deleting old paths that no longer exist in the new version of the bundle.\n\n\nIf you specify update, the bundle in the package overwrites the version on disk, and any files not contained in the package will be left intact; this is appropriate when you are delivering an update-only package.\n\n\nAnother effect of update is that the package bundle will not be installed at all if there is not already a version on disk; this allows a package to deliver an update for an app that the user might have deleted.\n\n\n\n\n\n\nInherited from \nTargetSpecificOptions\n:\n\n\n\n\nartifactName\n String - The \nartifact file name template\n.\n\n\npublish\n The \npublish\n options.",
            "title": "PKG"
        },
        {
            "location": "/configuration/win/",
            "text": "The top-level \nwin\n key contains set of options instructing electron-builder on how it should build Windows targets. These options applicable for any Windows target.\n\n\n\n\n\n\n\n\n\ntarget\n = \nnsis\n String | \nTargetConfiguration\n - The target package type: list of \nnsis\n, \nnsis-web\n (Web installer), \nportable\n (portable app without installation), \nappx\n, \nmsi\n, \nsquirrel\n, \n7z\n, \nzip\n, \ntar.xz\n, \ntar.lz\n, \ntar.gz\n, \ntar.bz2\n, \ndir\n. AppX package can be built only on Windows 10.\n\n\nTo use Squirrel.Windows please install \nelectron-builder-squirrel-windows\n dependency.\n\n\nFor \nportable\n app, \nPORTABLE_EXECUTABLE_DIR\n env is set (dir where portable executable located).\n\n\n\n\n\n\nicon\n = \nbuild/icon.ico\n String - The path to application icon.\n\n\n\n\nlegalTrademarks\n String - The trademarks and registered trademarks.\n\n\n\n\n\n\n\n\nsigningHashAlgorithms\n = \n['sha1', 'sha256']\n Array<\u201csha1\u201d | \u201csha256\u201d> - Array of signing algorithms used. For AppX \nsha256\n is always used.\n\n\nsign\n String | (configuration: CustomWindowsSignTaskConfiguration) => Promise - The custom function (or path to file or module id) to sign Windows executable.\n\n\ncertificateFile\n String - The path to the *.pfx certificate you want to sign with. Please use it only if you cannot use env variable \nCSC_LINK\n (\nWIN_CSC_LINK\n) for some reason. Please see \nCode Signing\n.\n\n\ncertificatePassword\n String - The password to the certificate provided in \ncertificateFile\n. Please use it only if you cannot use env variable \nCSC_KEY_PASSWORD\n (\nWIN_CSC_KEY_PASSWORD\n) for some reason. Please see \nCode Signing\n.\n\n\ncertificateSubjectName\n String - The name of the subject of the signing certificate. Required only for EV Code Signing and works only on Windows (or on macOS if \nParallels Desktop\n Windows 10 virtual machines exits).\n\n\ncertificateSha1\n String - The SHA1 hash of the signing certificate. The SHA1 hash is commonly specified when multiple certificates satisfy the criteria specified by the remaining switches. Works only on Windows (or on macOS if \nParallels Desktop\n Windows 10 virtual machines exits).\n\n\nadditionalCertificateFile\n String - The path to an additional certificate file you want to add to the signature block.\n\n\nrfc3161TimeStampServer\n = \nhttp://timestamp.comodoca.com/rfc3161\n String - The URL of the RFC 3161 time stamp server.\n\n\ntimeStampServer\n = \nhttp://timestamp.verisign.com/scripts/timstamp.dll\n String - The URL of the time stamp server.\n\n\n\n\n\n\n\n\npublisherName\n String | Array<String> - \nThe publisher name\n, exactly as in your code signed certificate. Several names can be provided. Defaults to common name from your code signing certificate.\n\n\nverifyUpdateCodeSignature\n = \ntrue\n Boolean - Whether to verify the signature of an available update before installation. The \npublisher name\n will be used for the signature verification.\n\n\nrequestedExecutionLevel\n = \nasInvoker\n \u201casInvoker\u201d | \u201chighestAvailable\u201d | \u201crequireAdministrator\u201d - The \nsecurity level\n at which the application requests to be executed. Cannot be specified per target, allowed only in the \nwin\n.\n\n\nsignAndEditExecutable\n = \ntrue\n Boolean - Whether to sign and add metadata to executable. Advanced option.\n\n\nsignDlls\n = \nfalse\n Boolean - Whether to sign DLL files. Advanced option. See: https://github.com/electron-userland/electron-builder/issues/3101#issuecomment-404212384\n\n\n\n\nelectronUpdaterCompatibility\n String - The electron-updater compatibility semver range. e.g. \n>= 2.16\n, \n>=1.0.0\n. Defaults to \n>=1.0.0\n\n\n1.0.0 sha2 2.15.0 path 2.16.0 files\n\n\n\n\n\n\n\n\n\n\n\nCommon Questions\n\u00b6\n\n\nHow do delegate code signing?\n\u00b6\n\n\nUse \nsign\n option.\n\n\n\"win\"\n:\n \n{\n\n  \n\"sign\"\n:\n \n\"./customSign.js\"\n\n\n}\n\n\n\n\n\nFile \ncustomSign.js\n in the project root directory:\n\nexports\n.\ndefault\n \n=\n \nasync\n \nfunction\n(\nconfiguration\n)\n \n{\n\n  \n// your custom code\n\n\n}\n\n\n\n\nHow do create Parallels Windows 10 Virtual Machine?\n\u00b6\n\n\nYou don\u2019t need to have Windows 10 license. Free is provided (expire after 90 days, but it is not a problem because no additional setup is required).\n\n\n\n\nOpen Parallels Desktop.\n\n\nFile -> New.\n\n\nSelect \u201cModern.IE\u201d in the \u201cFree Systems\u201d.\n\n\nContinue, Continue, Accept software license agreement.\n\n\nSelect \u201cMicrosoft Edge on Windows 10\u201d.\n\n\nThe next steps are general, see \nInstalling Windows on your Mac using Parallels Desktop\n from \u201cStep 6: Specify a name and location\u201d.\n\n\n\n\nParallels Windows 10 VM will be used automatically to build AppX on macOS. No need even start VM \u2014 it will be started automatically on demand and suspended after build. No need to specify VM \u2014 it will be detected automatically (first Windows 10 VM will be used).\n\n\nHow do create VirtualBox Windows 10 Virtual Machine?\n\u00b6\n\n\nIf you are not on macOS or don\u2019t want to buy \nParallels Desktop\n, you can use free \nVirtualBox\n.\n\n\n\n\nOpen \nDownload virtual machines\n.\n\n\nSelect \u201cMSEdge on Win10 (x64) Stable\u201d.\n\n\nSelect \u201cVirtualBox\u201d platform.\n\n\nDownload. See \ninstallation instructions\n.\n\n\n\n\nThe password to your VM is \nPassw0rd!\n.\n\n\nVirtualBox is not supported by electron-builder for now, so, you need to setup build environment on Windows if you want to use VirtualBox to build AppX (and other Windows-only tasks).",
            "title": "Any Windows Target"
        },
        {
            "location": "/configuration/win/#common-questions",
            "text": "",
            "title": "Common Questions"
        },
        {
            "location": "/configuration/win/#how-do-delegate-code-signing",
            "text": "Use  sign  option.  \"win\" :   { \n   \"sign\" :   \"./customSign.js\"  }   File  customSign.js  in the project root directory: exports . default   =   async   function ( configuration )   { \n   // your custom code  }",
            "title": "How do delegate code signing?"
        },
        {
            "location": "/configuration/win/#how-do-create-parallels-windows-10-virtual-machine",
            "text": "You don\u2019t need to have Windows 10 license. Free is provided (expire after 90 days, but it is not a problem because no additional setup is required).   Open Parallels Desktop.  File -> New.  Select \u201cModern.IE\u201d in the \u201cFree Systems\u201d.  Continue, Continue, Accept software license agreement.  Select \u201cMicrosoft Edge on Windows 10\u201d.  The next steps are general, see  Installing Windows on your Mac using Parallels Desktop  from \u201cStep 6: Specify a name and location\u201d.   Parallels Windows 10 VM will be used automatically to build AppX on macOS. No need even start VM \u2014 it will be started automatically on demand and suspended after build. No need to specify VM \u2014 it will be detected automatically (first Windows 10 VM will be used).",
            "title": "How do create Parallels Windows 10 Virtual Machine?"
        },
        {
            "location": "/configuration/win/#how-do-create-virtualbox-windows-10-virtual-machine",
            "text": "If you are not on macOS or don\u2019t want to buy  Parallels Desktop , you can use free  VirtualBox .   Open  Download virtual machines .  Select \u201cMSEdge on Win10 (x64) Stable\u201d.  Select \u201cVirtualBox\u201d platform.  Download. See  installation instructions .   The password to your VM is  Passw0rd! .  VirtualBox is not supported by electron-builder for now, so, you need to setup build environment on Windows if you want to use VirtualBox to build AppX (and other Windows-only tasks).",
            "title": "How do create VirtualBox Windows 10 Virtual Machine?"
        },
        {
            "location": "/configuration/nsis/",
            "text": "The top-level \nnsis\n key contains set of options instructing electron-builder on how it should build NSIS target (default target for Windows).\n\n\nThese options also applicable for \nWeb installer\n, use top-level \nnsisWeb\n key.\n\n\n\n\n\n\n\n\n\n\noneClick\n = \ntrue\n Boolean - Whether to create one-click installer or assisted.\n\n\n\n\nperMachine\n = \nfalse\n Boolean - If \noneClick\n is \ntrue\n (default): Whether to install per all users (per-machine).\n\n\nIf \noneClick\n is \nfalse\n: no install mode installer page (choice per-machine or per-user), always install per-machine.\n\n\n\n\n\n\nallowElevation\n = \ntrue\n Boolean - \nassisted installer only.\n Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.\n\n\n\n\nallowToChangeInstallationDirectory\n = \nfalse\n Boolean - \nassisted installer only.\n Whether to allow user to change installation directory.\n\n\n\n\n\n\n\n\ninstallerIcon\n String - The path to installer icon, relative to the \nbuild resources\n or to the project directory. Defaults to \nbuild/installerIcon.ico\n or application icon.\n\n\nuninstallerIcon\n String - The path to uninstaller icon, relative to the \nbuild resources\n or to the project directory. Defaults to \nbuild/uninstallerIcon.ico\n or application icon.\n\n\ninstallerHeader\n = \nbuild/installerHeader.bmp\n String - \nassisted installer only.\n \nMUI_HEADERIMAGE\n, relative to the \nbuild resources\n or to the project directory.\n\n\ninstallerHeaderIcon\n String - \none-click installer only.\n The path to header icon (above the progress bar), relative to the \nbuild resources\n or to the project directory. Defaults to \nbuild/installerHeaderIcon.ico\n or application icon.\n\n\ninstallerSidebar\n String - \nassisted installer only.\n \nMUI_WELCOMEFINISHPAGE_BITMAP\n, relative to the \nbuild resources\n or to the project directory. Defaults to \nbuild/installerSidebar.bmp\n or \n${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp\n. Image size 164 \u00d7 314 pixels.\n\n\nuninstallerSidebar\n String - \nassisted installer only.\n \nMUI_UNWELCOMEFINISHPAGE_BITMAP\n, relative to the \nbuild resources\n or to the project directory. Defaults to \ninstallerSidebar\n option or \nbuild/uninstallerSidebar.bmp\n or \nbuild/installerSidebar.bmp\n or \n${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp\n\n\nuninstallDisplayName\n = \n${productName} ${version}\n String - The uninstaller display name in the control panel.\n\n\n\n\n\n\n\n\ninclude\n String - The path to NSIS include script to customize installer. Defaults to \nbuild/installer.nsh\n. See \nCustom NSIS script\n.\n\n\nscript\n String - The path to NSIS script to customize installer. Defaults to \nbuild/installer.nsi\n. See \nCustom NSIS script\n.\n\n\n\n\nlicense\n String - The path to EULA license file. Defaults to \nlicense.txt\n or \neula.txt\n (or uppercase variants). In addition to \ntxt,\nrtf\nand\nhtml\nsupported (don't forget to use\ntarget=\u201d_blank\u201d` for links).\n\n\nMultiple license files in different languages are supported \u2014 use lang postfix (e.g. \n_de\n, \n_ru\n)). For example, create files \nlicense_de.txt\n and \nlicense_en.txt\n in the build resources. If OS language is german, \nlicense_de.txt\n will be displayed. See map of \nlanguage code to name\n.\n\n\nAppropriate license file will be selected by user OS language.\n\n\n\n\n\n\nartifactName\n String - The \nartifact file name template\n. Defaults to \n${productName} Setup ${version}.${ext}\n.\n\n\n\n\ndeleteAppDataOnUninstall\n = \nfalse\n Boolean - \none-click installer only.\n Whether to delete app data on uninstall.\n\n\ndifferentialPackage\n Boolean - Defaults to \ntrue\n for web installer (\nnsis-web\n)\n\n\n\n\n\n\n\n\ndisplayLanguageSelector\n = \nfalse\n Boolean - Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).\n\n\ninstallerLanguages\n Array<String> | String - The installer languages (e.g. \nen_US\n, \nde_DE\n). Change only if you understand what do you do and for what.\n\n\nlanguage\n String - \nLCID Dec\n, defaults to \n1033\n(\nEnglish - United States\n).\n\n\nmultiLanguageInstaller\n Boolean - Whether to create multi-language installer. Defaults to \nunicode\n option value.\n\n\npackElevateHelper\n = \ntrue\n Boolean - Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if \nperMachine\n is set to \ntrue\n.\n\n\npreCompressedFileExtensions\n = \n[\".avi\", \".mov\", \".m4v\", \".mp4\", \".m4p\", \".qt\", \".mkv\", \".webm\", \".vmdk\"]\n Array<String> | String - The file extension of files that will be not compressed. Applicable only for \nextraResources\n and \nextraFiles\n files.\n\n\nunicode\n = \ntrue\n Boolean - Whether to create \nUnicode installer\n.\n\n\nguid\n String - See \nGUID vs Application Name\n.\n\n\nwarningsAsErrors\n = \ntrue\n Boolean - If \nwarningsAsErrors\n is \ntrue\n (default): NSIS will treat warnings as errors. If \nwarningsAsErrors\n is \nfalse\n: NSIS will allow warnings.\n\n\nrunAfterFinish\n = \ntrue\n Boolean - Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.\n\n\n\n\n\n\n\n\ncreateDesktopShortcut\n = \ntrue\n Boolean | \u201calways\u201d - Whether to create desktop shortcut. Set to \nalways\n if to recreate also on reinstall (even if removed by user).\n\n\ncreateStartMenuShortcut\n = \ntrue\n Boolean - Whether to create start menu shortcut.\n\n\nmenuCategory\n = \nfalse\n Boolean | String - Whether to create submenu for start menu shortcut and program files directory. If \ntrue\n, company name will be used. Or string value.\n\n\nshortcutName\n String - The name that will be used for all shortcuts. Defaults to the application name.\n<!\u2013 end of generated block \u2013\n\n\n\n\n\n\nInherited from \nTargetSpecificOptions\n:\n\n\n\n\nartifactName\n String - The \nartifact file name template\n.\n\n\npublish\n The \npublish\n options\n\n\n\n\n\n\nUnicode enabled by default. Large strings are supported (maximum string length of 8192 bytes instead of the default of 1024 bytes).\n\n\n32 bit + 64 bit\n\u00b6\n\n\nIf you build both ia32 and x64 arch (\n--x64 --ia32\n), you in any case get one installer. Appropriate arch will be installed automatically.\nThe same applied to web installer (\nnsis-web\n \ntarget\n).\n\n\nWeb Installer\n\u00b6\n\n\nTo build web installer, set \ntarget\n to \nnsis-web\n. Web Installer automatically detects OS architecture and downloads corresponding package file. So, user don\u2019t need to guess what installer to download and in the same time you don\u2019t bundle package files for all architectures in the one installer (as in case of default \nnsis\n target). It doesn\u2019t matter for common Electron application (due to superb LZMA compression, size difference is acceptable), but if your application is huge, Web Installer is a solution.\n\n\nTo customize web installer, use the top-level \nnsisWeb\n key (not \nnsis\n).\n\n\nIf for some reasons web installer cannot download (antivirus, offline):\n\n Download package file into the same directory where installer located. It will be detected automatically and used instead of downloading from the Internet. Please note \u2014 only original package file is allowed (checksum is checked).\n\n Specify any local package file using \n--package-file=path_to_file\n.\n\n\nCustom NSIS script\n\u00b6\n\n\nTwo options are available \u2014 \ninclude\n and \nscript\n. \nscript\n allows you to provide completely different NSIS script. For most cases it is not required as you need only to customise some aspects, but still use well-tested and maintained default NSIS script. So, \ninclude\n is recommended.\n\n\nKeep in mind \u2014 if you customize NSIS script, you should always state about it in the issue reports. And don\u2019t expect that your issue will be resolved.\n\n\n\n\nAdd file \nbuild/installer.nsh\n.\n\n\n\n\nDefine wanted macro to customise: \ncustomHeader\n, \npreInit\n, \ncustomInit\n, \ncustomUnInit\n, \ncustomInstall\n, \ncustomUnInstall\n, \ncustomRemoveFiles\n. Example:\n   \n \n!macro\n customHeader\n   \n!system\n \n\"echo '' > ${BUILD_RESOURCES_DIR}/customHeader\n\"\n\n \n!macroend\n\n\n \n!macro\n preInit\n   \n; This macro is inserted at the beginning of the NSIS .OnInit callback\n\n   \n!system\n \n\"echo '' > ${BUILD_RESOURCES_DIR}/preInit\n\"\n\n \n!macroend\n\n\n \n!macro\n customInit\n   \n!system\n \n\"echo '' > ${BUILD_RESOURCES_DIR}/customInit\n\"\n\n \n!macroend\n\n\n \n!macro\n customInstall\n   \n!system\n \n\"echo '' > ${BUILD_RESOURCES_DIR}/customInstall\n\"\n\n \n!macroend\n\n\n\n\n\n\n\n\nBUILD_RESOURCES_DIR\n and \nPROJECT_DIR\n are defined.\n\n\n\n\nbuild\n is added as \naddincludedir\n (i.e. you don\u2019t need to use \nBUILD_RESOURCES_DIR\n to include files).\n\n\nbuild/x86-unicode\n and \nbuild/x86-ansi\n are added as \naddplugindir\n.\n\n\nFile associations macro \nregisterFileAssociations\n and \nunregisterFileAssociations\n are still defined.\n\n\nAll other electron-builder specific flags (e.g. \nONE_CLICK\n) are still defined.\n\n\n\n\nGUID vs Application Name\n\u00b6\n\n\nWindows requires to use registry keys (e.g. INSTALL/UNINSTALL info). Squirrel.Windows simply uses application name as key.\nBut it is not robust \u2014 Google can use key Google Chrome SxS, because it is a Google.\n\n\nSo, it is better to use \nGUID\n.\nYou are not forced to explicitly specify it \u2014 name-based \nUUID v5\n will be generated from your \nappId\n or \nname\n.\nIt means that you \nshould not change appId\n once your application in use (or name if \nappId\n was not set). Application product name (title) or description can be safely changed.\n\n\nYou can explicitly set guid using option \nnsis.guid\n, but it is not recommended \u2014 consider using \nappId\n.\n\n\nIt is also important to set the Application User Model ID (AUMID) to the \nappId\n of the application, in order for notifications on Windows 8/8.1 to function and for Window 10 notifications to display the app icon within the notifications by default. The AUMID should be set within the Main process and before any BrowserWindows have been opened, it is normally the first piece of code executed: \napp.setAppUserModelId(appId)\n\n\n\n\nCommon Questions\n\u00b6\n\n\nHow do change the default installation directory to custom?\n\u00b6\n\n\nIt is very specific requirement. Do not do if you are not sure. Add \ncustom macro\n:\n\n\n!macro\n preInit\n    SetRegView 64\n    \nWriteRegExpandStr\n \nHKLM\n \n\"${INSTALL_REGISTRY_KEY}\n\"\n InstallLocation \n\"C:\\MyApp\n\"\n\n    \nWriteRegExpandStr\n \nHKCU\n \n\"${INSTALL_REGISTRY_KEY}\n\"\n InstallLocation \n\"C:\\MyApp\n\"\n\n    SetRegView 32\n    \nWriteRegExpandStr\n \nHKLM\n \n\"${INSTALL_REGISTRY_KEY}\n\"\n InstallLocation \n\"C:\\MyApp\n\"\n\n    \nWriteRegExpandStr\n \nHKCU\n \n\"${INSTALL_REGISTRY_KEY}\n\"\n InstallLocation \n\"C:\\MyApp\n\"\n\n\n!macroend",
            "title": "NSIS"
        },
        {
            "location": "/configuration/nsis/#32-bit-64-bit",
            "text": "If you build both ia32 and x64 arch ( --x64 --ia32 ), you in any case get one installer. Appropriate arch will be installed automatically.\nThe same applied to web installer ( nsis-web   target ).",
            "title": "32 bit + 64 bit"
        },
        {
            "location": "/configuration/nsis/#web-installer",
            "text": "To build web installer, set  target  to  nsis-web . Web Installer automatically detects OS architecture and downloads corresponding package file. So, user don\u2019t need to guess what installer to download and in the same time you don\u2019t bundle package files for all architectures in the one installer (as in case of default  nsis  target). It doesn\u2019t matter for common Electron application (due to superb LZMA compression, size difference is acceptable), but if your application is huge, Web Installer is a solution.  To customize web installer, use the top-level  nsisWeb  key (not  nsis ).  If for some reasons web installer cannot download (antivirus, offline):  Download package file into the same directory where installer located. It will be detected automatically and used instead of downloading from the Internet. Please note \u2014 only original package file is allowed (checksum is checked).  Specify any local package file using  --package-file=path_to_file .",
            "title": "Web Installer"
        },
        {
            "location": "/configuration/nsis/#custom-nsis-script",
            "text": "Two options are available \u2014  include  and  script .  script  allows you to provide completely different NSIS script. For most cases it is not required as you need only to customise some aspects, but still use well-tested and maintained default NSIS script. So,  include  is recommended.  Keep in mind \u2014 if you customize NSIS script, you should always state about it in the issue reports. And don\u2019t expect that your issue will be resolved.   Add file  build/installer.nsh .   Define wanted macro to customise:  customHeader ,  preInit ,  customInit ,  customUnInit ,  customInstall ,  customUnInstall ,  customRemoveFiles . Example:\n      !macro  customHeader\n    !system   \"echo '' > ${BUILD_RESOURCES_DIR}/customHeader \" \n  !macroend \n\n  !macro  preInit\n    ; This macro is inserted at the beginning of the NSIS .OnInit callback \n    !system   \"echo '' > ${BUILD_RESOURCES_DIR}/preInit \" \n  !macroend \n\n  !macro  customInit\n    !system   \"echo '' > ${BUILD_RESOURCES_DIR}/customInit \" \n  !macroend \n\n  !macro  customInstall\n    !system   \"echo '' > ${BUILD_RESOURCES_DIR}/customInstall \" \n  !macroend     BUILD_RESOURCES_DIR  and  PROJECT_DIR  are defined.   build  is added as  addincludedir  (i.e. you don\u2019t need to use  BUILD_RESOURCES_DIR  to include files).  build/x86-unicode  and  build/x86-ansi  are added as  addplugindir .  File associations macro  registerFileAssociations  and  unregisterFileAssociations  are still defined.  All other electron-builder specific flags (e.g.  ONE_CLICK ) are still defined.",
            "title": "Custom NSIS script"
        },
        {
            "location": "/configuration/nsis/#guid-vs-application-name",
            "text": "Windows requires to use registry keys (e.g. INSTALL/UNINSTALL info). Squirrel.Windows simply uses application name as key.\nBut it is not robust \u2014 Google can use key Google Chrome SxS, because it is a Google.  So, it is better to use  GUID .\nYou are not forced to explicitly specify it \u2014 name-based  UUID v5  will be generated from your  appId  or  name .\nIt means that you  should not change appId  once your application in use (or name if  appId  was not set). Application product name (title) or description can be safely changed.  You can explicitly set guid using option  nsis.guid , but it is not recommended \u2014 consider using  appId .  It is also important to set the Application User Model ID (AUMID) to the  appId  of the application, in order for notifications on Windows 8/8.1 to function and for Window 10 notifications to display the app icon within the notifications by default. The AUMID should be set within the Main process and before any BrowserWindows have been opened, it is normally the first piece of code executed:  app.setAppUserModelId(appId)",
            "title": "GUID vs Application Name"
        },
        {
            "location": "/configuration/nsis/#common-questions",
            "text": "",
            "title": "Common Questions"
        },
        {
            "location": "/configuration/nsis/#how-do-change-the-default-installation-directory-to-custom",
            "text": "It is very specific requirement. Do not do if you are not sure. Add  custom macro :  !macro  preInit\n    SetRegView 64\n     WriteRegExpandStr   HKLM   \"${INSTALL_REGISTRY_KEY} \"  InstallLocation  \"C:\\MyApp \" \n     WriteRegExpandStr   HKCU   \"${INSTALL_REGISTRY_KEY} \"  InstallLocation  \"C:\\MyApp \" \n    SetRegView 32\n     WriteRegExpandStr   HKLM   \"${INSTALL_REGISTRY_KEY} \"  InstallLocation  \"C:\\MyApp \" \n     WriteRegExpandStr   HKCU   \"${INSTALL_REGISTRY_KEY} \"  InstallLocation  \"C:\\MyApp \"  !macroend",
            "title": "How do change the default installation directory to custom?"
        },
        {
            "location": "/configuration/appx/",
            "text": "The top-level \nappx\n key contains set of options instructing electron-builder on how it should build AppX (Windows Store).\n\n\nAll options are optional. All required for AppX configuration is inferred and computed automatically.\n\n\n\n\n\n\n\napplicationId\n String - The application id. Defaults to \nidentityName\n. Can\u2019t start with numbers.\n\n\nbackgroundColor\n = \n#464646\n String - The background color of the app tile. See \nVisual Elements\n.\n\n\ndisplayName\n String - A friendly name that can be displayed to users. Corresponds to \nProperties.DisplayName\n. Defaults to the application product name.\n\n\nidentityName\n String - The name. Corresponds to \nIdentity.Name\n. Defaults to the \napplication name\n.\n\n\npublisher\n String - The Windows Store publisher. Not used if AppX is build for testing. See \nAppX Package Code Signing\n below.\n\n\npublisherDisplayName\n String - A friendly name for the publisher that can be displayed to users. Corresponds to \nProperties.PublisherDisplayName\n. Defaults to company name from the application metadata.\n\n\nlanguages\n Array<String> | String - The list of \nsupported languages\n that will be listed in the Windows Store. The first entry (index 0) will be the default language. Defaults to en-US if omitted.\n\n\naddAutoLaunchExtension\n Boolean - Whether to add auto launch extension. Defaults to \ntrue\n if \nelectron-winstore-auto-launch\n in the dependencies.\n\n\n\n\nInherited from \nTargetSpecificOptions\n:\n\n\n\n\nartifactName\n String - The \nartifact file name template\n.\n\n\npublish\n The \npublish\n options.\n\n\n\n\n\nAppX Package Code Signing\n\u00b6\n\n\n\n\nIf the AppX package is meant for enterprise or self-made distribution (manually install the app without using the Store for testing or for enterprise distribution), it must be \nsigned\n.\n\n\nIf the AppX package is meant for Windows Store distribution, no need to sign the package with any certificate. The Windows Store will take care of signing it with a Microsoft certificate during the submission process.\n\n\n\n\nAppX Assets\n\u00b6\n\n\nAppX assets need to be placed in the \nappx\n folder in the \nbuild\n directory.\n\n\nThe assets should follow these naming conventions:\n\n\n\n\nLogo: \nStoreLogo.png\n\n\nSquare150x150Logo: \nSquare150x150Logo.png\n\n\nSquare44x44Logo: \nSquare44x44Logo.png\n\n\nWide310x150Logo: \nWide310x150Logo.png\n\n\nOptional\n BadgeLogo: \nBadgeLogo.png\n\n\nOptional\n Square310x310Logo: \nLargeTile.png\n\n\nOptional\n Square71x71Logo: \nSmallTile.png\n\n\nOptional\n SplashScreen: \nSplashScreen.png\n\n\n\n\nAll official AppX asset types are supported by the build process. These assets can include scaled assets by using \ntarget size\n and \nscale\n in the name.\nSee \nGuidelines for tile and icon assets\n for more information.\n\n\nDefault assets will be used for \nLogo\n, \nSquare150x150Logo\n, \nSquare44x44Logo\n and \nWide310x150Logo\n if not provided. For assets marked \nOptional\n, these assets will not be listed in the manifest file if not provided.\n\n\nHow to publish your Electron App to the Windows App Store\n\u00b6\n\n\n\n\nYou\u2019ll need a microsoft developer account (pay some small fee). Use your favourite search engine to find the registration form.\n\n\nRegister you app for the desktop bridge \nhere\n.\n\n\nWait for MS to answer and further guide you.\n\n\nIn the meantime, build and test your appx. It\u2019s dead simple. \n\n\n\n\njson \n   \"win\": {\n     \"target\": \"appx\",\n   },\n\n5. The rest should be pretty straight forward \u2014 upload the appx to the store and wait for approval.\n\n\nBuilding AppX on macOS\n\u00b6\n\n\nThe only solution for now \u2014 using \nParallels Desktop for Mac\n (\nPro Edition\n is required). Create Windows 10 virtual machine and start it. It will be detected and used automatically to build AppX on your macOS machine. Nothing is required to setup on Windows. It allows you to not copy project to Windows and to not setup build environment on Windows.\n\n\nCommon Questions\n\u00b6\n\n\nHow do install AppX without trusted certificate?\n\u00b6\n\n\nIf you use self-signed certificate, you need to add it to \u201cTrusted People\u201d. See \nInstall the certificate\n.",
            "title": "AppX"
        },
        {
            "location": "/configuration/appx/#appx-package-code-signing",
            "text": "If the AppX package is meant for enterprise or self-made distribution (manually install the app without using the Store for testing or for enterprise distribution), it must be  signed .  If the AppX package is meant for Windows Store distribution, no need to sign the package with any certificate. The Windows Store will take care of signing it with a Microsoft certificate during the submission process.",
            "title": "AppX Package Code Signing"
        },
        {
            "location": "/configuration/appx/#appx-assets",
            "text": "AppX assets need to be placed in the  appx  folder in the  build  directory.  The assets should follow these naming conventions:   Logo:  StoreLogo.png  Square150x150Logo:  Square150x150Logo.png  Square44x44Logo:  Square44x44Logo.png  Wide310x150Logo:  Wide310x150Logo.png  Optional  BadgeLogo:  BadgeLogo.png  Optional  Square310x310Logo:  LargeTile.png  Optional  Square71x71Logo:  SmallTile.png  Optional  SplashScreen:  SplashScreen.png   All official AppX asset types are supported by the build process. These assets can include scaled assets by using  target size  and  scale  in the name.\nSee  Guidelines for tile and icon assets  for more information.  Default assets will be used for  Logo ,  Square150x150Logo ,  Square44x44Logo  and  Wide310x150Logo  if not provided. For assets marked  Optional , these assets will not be listed in the manifest file if not provided.",
            "title": "AppX Assets"
        },
        {
            "location": "/configuration/appx/#how-to-publish-your-electron-app-to-the-windows-app-store",
            "text": "You\u2019ll need a microsoft developer account (pay some small fee). Use your favourite search engine to find the registration form.  Register you app for the desktop bridge  here .  Wait for MS to answer and further guide you.  In the meantime, build and test your appx. It\u2019s dead simple.    json \n   \"win\": {\n     \"target\": \"appx\",\n   }, \n5. The rest should be pretty straight forward \u2014 upload the appx to the store and wait for approval.",
            "title": "How to publish your Electron App to the Windows App Store"
        },
        {
            "location": "/configuration/appx/#building-appx-on-macos",
            "text": "The only solution for now \u2014 using  Parallels Desktop for Mac  ( Pro Edition  is required). Create Windows 10 virtual machine and start it. It will be detected and used automatically to build AppX on your macOS machine. Nothing is required to setup on Windows. It allows you to not copy project to Windows and to not setup build environment on Windows.",
            "title": "Building AppX on macOS"
        },
        {
            "location": "/configuration/appx/#common-questions",
            "text": "",
            "title": "Common Questions"
        },
        {
            "location": "/configuration/appx/#how-do-install-appx-without-trusted-certificate",
            "text": "If you use self-signed certificate, you need to add it to \u201cTrusted People\u201d. See  Install the certificate .",
            "title": "How do install AppX without trusted certificate?"
        },
        {
            "location": "/configuration/squirrel-windows/",
            "text": "The top-level \nsquirrelWindows\n key contains set of options instructing electron-builder on how it should build Squirrel.Windows.\n\n\nSquirrel.Windows target is maintained, but deprecated. Please use \nnsis\n instead.\n\n\nTo use Squirrel.Windows please install \nelectron-builder-squirrel-windows\n dependency.\nTo build for Squirrel.Windows on macOS, please install \nmono\n (\nbrew install mono\n).\n\n\n\n\n\n\n\n\n\niconUrl\n String - A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\n\n\nPlease note \u2014 \nlocal icon file url is not accepted\n, must be https/http.\n\n\nIf you don\u2019t plan to build windows installer, you can omit it. If your project repository is public on GitHub, it will be \nhttps://github.com/${u}/${p}/blob/master/build/icon.ico?raw=true\n by default.\n\n\n\n\n\n\nloadingGif\n String - The path to a .gif file to display during install. \nbuild/install-spinner.gif\n will be used if exists (it is a recommended way to set) (otherwise \ndefault\n).\n\n\n\n\nmsi\n Boolean - Whether to create an MSI installer. Defaults to \nfalse\n (MSI is not created).\n\n\nremoteReleases\n String | Boolean - A URL to your existing updates. Or \ntrue\n to automatically set to your GitHub repository. If given, these will be downloaded to create delta updates.\n\n\nremoteToken\n String - Authentication token for remote updates\n\n\nuseAppIdAsId\n Boolean - Use \nappId\n to identify package instead of \nname\n.\n\n\n\n\nInherited from \nTargetSpecificOptions\n:\n\n\n\n\nartifactName\n String - The \nartifact file name template\n.\n\n\npublish\n The \npublish\n options.",
            "title": "Squirrel.Windows"
        },
        {
            "location": "/configuration/linux/",
            "text": "The top-level \nlinux\n key contains set of options instructing electron-builder on how it should build Linux targets. These options applicable for any Linux target.\n\n\n\n\n\n\n\n\n\ntarget\n = \nAppImage\n String | \nTargetConfiguration\n - Target package type: list of \nAppImage\n, \nsnap\n, \ndeb\n, \nrpm\n, \nfreebsd\n, \npacman\n, \np5p\n, \napk\n, \n7z\n, \nzip\n, \ntar.xz\n, \ntar.lz\n, \ntar.gz\n, \ntar.bz2\n, \ndir\n.\n\n\nelectron-builder \ndocker image\n can be used to build Linux targets on any platform.\n\n\nPlease \ndo not put an AppImage into another archive\n like a .zip or .tar.gz.\n\n\n\n\n\n\nmaintainer\n String - The maintainer. Defaults to \nauthor\n.\n\n\n\n\nvendor\n String - The vendor. Defaults to \nauthor\n.\n\n\nexecutableName\n String - The executable name. Defaults to \nproductName\n. Cannot be specified per target, allowed only in the \nlinux\n.\n\n\nicon\n String - The path to icon set directory or one png file, relative to the \nbuild resources\n or to the project directory. The icon filename must contain the size (e.g. 32x32.png) of the icon. By default will be generated automatically based on the macOS icns file.\n\n\nsynopsis\n String - The \nshort description\n.\n\n\ndescription\n String - As \ndescription\n from application package.json, but allows you to specify different for Linux.\n\n\ncategory\n String - The \napplication category\n.\n\n\nmimeTypes\n Array<String> - The mime types in addition to specified in the file associations. Use it if you don\u2019t want to register a new mime type, but reuse existing.\n\n\ndesktop\n any - The \nDesktop file\n entries (name to value).\n\n\n\n\n\nDebian Package Options\n\u00b6\n\n\nThe top-level \ndeb\n key contains set of options instructing electron-builder on how it should build Debian package.\n\n\n\n\ndepends\n Array<String> - Package dependencies. Defaults to \n[\"gconf2\", \"gconf-service\", \"libnotify4\", \"libappindicator1\", \"libxtst6\", \"libnss3\"]\n.\n\n\npackageCategory\n String - The \npackage category\n.\n\n\npriority\n String - The \nPriority\n attribute\n\n\n\n\nAll \nLinuxTargetSpecificOptions\n can be also specified in the \ndeb\n to customize Debian package. \n\n\nLinuxTargetSpecificOptions\n APK, FreeBSD, Pacman, P5P and RPM Options\n\u00b6\n\n\n\n\nThe top-level \napk\n, \nfreebsd\n, \npacman\n, \np5p\n and \nrpm\n keys contains set of options instructing electron-builder on how it should build corresponding Linux target.\n\n\n\n\ndepends\n Array<String> - Package dependencies.\n\n\ncompression\n = \nxz\n \u201cgz\u201d | \u201cbzip2\u201d | \u201cxz\u201d - The compression type.\n\n\nicon\n String\n\n\npackageCategory\n String - The package category.\n\n\nvendor\n String\n\n\nmaintainer\n String\n\n\nafterInstall\n String\n\n\nafterRemove\n String\n\n\n\n\nfpm\n Array<String> - \nAdvanced only\n The \nfpm\n options.\n\n\nExample: \n[\"--before-install=build/deb-preinstall.sh\", \"--after-upgrade=build/deb-postinstall.sh\"]\n\n\n\n\n\n\nInherited from \nCommonLinuxOptions\n:\n\n\n\n\nsynopsis\n String - The \nshort description\n.\n\n\ndescription\n String - As \ndescription\n from application package.json, but allows you to specify different for Linux.\n\n\ncategory\n String - The \napplication category\n.\n\n\nmimeTypes\n Array<String> - The mime types in addition to specified in the file associations. Use it if you don\u2019t want to register a new mime type, but reuse existing.\n\n\ndesktop\n any - The \nDesktop file\n entries (name to value).\n\n\n\n\nInherited from \nTargetSpecificOptions\n:\n\n\n\n\nartifactName\n String - The \nartifact file name template\n.\n\n\npublish\n The \npublish\n options",
            "title": "Any Linux Target"
        },
        {
            "location": "/configuration/linux/#debian-package-options",
            "text": "The top-level  deb  key contains set of options instructing electron-builder on how it should build Debian package.   depends  Array<String> - Package dependencies. Defaults to  [\"gconf2\", \"gconf-service\", \"libnotify4\", \"libappindicator1\", \"libxtst6\", \"libnss3\"] .  packageCategory  String - The  package category .  priority  String - The  Priority  attribute   All  LinuxTargetSpecificOptions  can be also specified in the  deb  to customize Debian package.",
            "title": "Debian Package Options"
        },
        {
            "location": "/configuration/linux/#linuxtargetspecificoptions-apk-freebsd-pacman-p5p-and-rpm-options",
            "text": "The top-level  apk ,  freebsd ,  pacman ,  p5p  and  rpm  keys contains set of options instructing electron-builder on how it should build corresponding Linux target.   depends  Array<String> - Package dependencies.  compression  =  xz  \u201cgz\u201d | \u201cbzip2\u201d | \u201cxz\u201d - The compression type.  icon  String  packageCategory  String - The package category.  vendor  String  maintainer  String  afterInstall  String  afterRemove  String   fpm  Array<String> -  Advanced only  The  fpm  options.  Example:  [\"--before-install=build/deb-preinstall.sh\", \"--after-upgrade=build/deb-postinstall.sh\"]    Inherited from  CommonLinuxOptions :   synopsis  String - The  short description .  description  String - As  description  from application package.json, but allows you to specify different for Linux.  category  String - The  application category .  mimeTypes  Array<String> - The mime types in addition to specified in the file associations. Use it if you don\u2019t want to register a new mime type, but reuse existing.  desktop  any - The  Desktop file  entries (name to value).   Inherited from  TargetSpecificOptions :   artifactName  String - The  artifact file name template .  publish  The  publish  options",
            "title": "LinuxTargetSpecificOptions APK, FreeBSD, Pacman, P5P and RPM Options"
        },
        {
            "location": "/configuration/appimage/",
            "text": "The top-level \nappImage\n key contains set of options instructing electron-builder on how it should build \nAppImage\n.\n\n\n\n\nsystemIntegration\n = \nask\n \u201cask\u201d | \u201cdoNotAsk\u201d - The system integration installation.\n\n\nlicense\n String - The path to EULA license file. Defaults to \nlicense.txt\n or \neula.txt\n (or uppercase variants). Only plain text is supported.\n\n\n\n\nInherited from \nCommonLinuxOptions\n:\n\n\n\n\nsynopsis\n String - The \nshort description\n.\n\n\ndescription\n String - As \ndescription\n from application package.json, but allows you to specify different for Linux.\n\n\ncategory\n String - The \napplication category\n.\n\n\nmimeTypes\n Array<String> - The mime types in addition to specified in the file associations. Use it if you don\u2019t want to register a new mime type, but reuse existing.\n\n\ndesktop\n any - The \nDesktop file\n entries (name to value).\n\n\n\n\nInherited from \nTargetSpecificOptions\n:\n\n\n\n\nartifactName\n String - The \nartifact file name template\n.\n\n\npublish\n The \npublish\n options",
            "title": "AppImage"
        },
        {
            "location": "/configuration/snap/",
            "text": "The top-level \nsnap\n key contains set of options instructing electron-builder on how it should build \nSnap\n.\n\n\n\n\n\n\n\nconfinement\n = \nstrict\n \u201cdevmode\u201d | \u201cstrict\u201d | \u201cclassic\u201d - The type of \nconfinement\n supported by the snap.\n\n\nenvironment\n any - The custom environment. Defaults to \n{\"TMPDIR: \"$XDG_RUNTIME_DIR\"}\n. If you set custom, it will be merged with default.\n\n\nsummary\n String\n\n\ngrade\n = \nstable\n \u201cdevel\u201d | \u201cstable\u201d - The quality grade of the snap. It can be either \ndevel\n (i.e. a development version of the snap, so not to be published to the \u201cstable\u201d or \u201ccandidate\u201d channels) or \u201cstable\u201d (i.e. a stable release or release candidate, which can be released to all channels).\n\n\nassumes\n Array<String> | String - The list of features that must be supported by the core in order for this snap to install.\n\n\nbuildPackages\n Array<String> - The list of debian packages needs to be installed for building this snap.\n\n\n\n\nstagePackages\n Array<String> - The list of Ubuntu packages to use that are needed to support the \napp\n part creation. Like \ndepends\n for \ndeb\n. Defaults to \n[\"libasound2\", \"libgconf2-4\", \"libnotify4\", \"libnspr4\", \"libnss3\", \"libpcre3\", \"libpulse0\", \"libxss1\", \"libxtst6\"]\n.\n\n\nIf list contains \ndefault\n, it will be replaced to default list, so, \n[\"default\", \"foo\"]\n can be used to add custom package \nfoo\n in addition to defaults.\n\n\n\n\n\n\nhooks\n = \nbuild/snap-hooks\n String - The \nhooks\n directory, relative to \nbuild\n (build resources directory).\n\n\n\n\n\n\nplugs\n Array<String | module:electron-builder-lib/out/options/SnapOptions.PlugDescriptor> | module:electron-builder-lib/out/options/SnapOptions.PlugDescriptor - The list of \nplugs\n. Defaults to \n[\"desktop\", \"desktop-legacy\", \"home\", \"x11\", \"unity7\", \"browser-support\", \"network\", \"gsettings\", \"pulseaudio\", \"opengl\"]\n.\n\n\nIf list contains \ndefault\n, it will be replaced to default list, so, \n[\"default\", \"foo\"]\n can be used to add custom plug \nfoo\n in addition to defaults.\n\n\nAdditional attributes can be specified using object instead of just name of plug: \n[  {    \"browser-sandbox\": {      \"interface\": \"browser-support\",      \"allow-sandbox\": true    },  },  \"another-simple-plug-name\" ]\n\n\n\n\n\n\nafter\n Array<String> - Specifies any \nparts\n that should be built before this part. Defaults to \n[\"desktop-gtk2\"\"]\n.\n\n\nIf list contains \ndefault\n, it will be replaced to default list, so, \n[\"default\", \"foo\"]\n can be used to add custom parts \nfoo\n in addition to defaults.\n\n\n\n\n\n\nuseTemplateApp\n Boolean - Whether to use template snap. Defaults to \ntrue\n if \nstagePackages\n not specified.\n\n\n\n\n\n\nInherited from \nCommonLinuxOptions\n:\n\n\n\n\nsynopsis\n String - The \nshort description\n.\n\n\ndescription\n String - As \ndescription\n from application package.json, but allows you to specify different for Linux.\n\n\ncategory\n String - The \napplication category\n.\n\n\nmimeTypes\n Array<String> - The mime types in addition to specified in the file associations. Use it if you don\u2019t want to register a new mime type, but reuse existing.\n\n\ndesktop\n any - The \nDesktop file\n entries (name to value).\n\n\n\n\nInherited from \nTargetSpecificOptions\n:\n\n\n\n\nartifactName\n String - The \nartifact file name template\n.\n\n\npublish\n The \npublish\n options.",
            "title": "Snap"
        },
        {
            "location": "/configuration/target/",
            "text": "Without target configuration, electron-builder builds Electron app for current platform and current arch using default target.\n\n\n\n\nmacOS - DMG and ZIP for Squirrel.Mac.\n\n\nWindows - \nNSIS\n.\n\n\nLinux - AppImage.\n\n\n\n\nPlatforms and archs can be configured or using \nCLI args\n, or in the configuration. \n\n\nFor example, if you don\u2019t want to pass \n--ia32\n and \n--x64\n flags each time, but instead build by default NSIS target for all archs for Windows:\n\n\n\"win\"\n:\n \n{\n\n  \n\"target\"\n:\n \n[\n\n    \n{\n\n      \n\"target\"\n:\n \n\"nsis\"\n,\n\n      \n\"arch\"\n:\n \n[\n\n        \n\"x64\"\n,\n\n        \n\"ia32\"\n\n      \n]\n\n    \n}\n\n  \n]\n\n\n}\n,\n\n\n\n\n\nand use\n\nbuild -wl\n\n\n\nTargetConfiguration\n\u00b6\n\n\n\n\n \ntarget\n String - The target name. e.g. \nsnap\n.\n\n \narch\n Array<\u201cx64\u201d | \u201cia32\u201d | \u201carmv7l\u201d | \u201carm64\u201d> | \u201cx64\u201d | \u201cia32\u201d | \u201carmv7l\u201d | \u201carm64\u201d - The arch or list of archs.",
            "title": "Target"
        },
        {
            "location": "/configuration/target/#targetconfiguration",
            "text": "target  String - The target name. e.g.  snap .   arch  Array<\u201cx64\u201d | \u201cia32\u201d | \u201carmv7l\u201d | \u201carm64\u201d> | \u201cx64\u201d | \u201cia32\u201d | \u201carmv7l\u201d | \u201carm64\u201d - The arch or list of archs.",
            "title": "TargetConfiguration"
        },
        {
            "location": "/configuration/publish/",
            "text": "The \npublish\n key contains a set of options instructing electron-builder on how it should publish artifacts and build update info files for \nauto update\n.\n\n\nString | Object | Array<Object | String>\n where \nObject\n it is \nBintrayOptions\n, \nGenericServerOptions\n, \nGitHub\n, \nS3Options\n or \nSpacesOptions\n. Order is important \u2014 first item will be used as a default auto-update server. Can be specified in the \ntop-level configuration\n or any platform- (\nmac\n, \nlinux\n, \nwin\n) or target- (e.g. \nnsis\n) specific configuration.\n\n\nIf \nGH_TOKEN\n is defined \u2014 defaults to \n[{provider: \"github\"}]\n.\n\n\nIf \nBT_TOKEN\n is defined and \nGH_TOKEN\n is not \u2014 defaults to \n[{provider: \"bintray\"}]\n.\n\n\nTravis and AppVeyor support publishing artifacts. But it requires additional configuration for each CI and you need to configure what to publish.\n\nelectron-builder\n makes publishing dead simple.\n\n\nYou can publish to multiple providers. For example, to publish Windows artifacts to both GitHub and Bintray (order is important \u2014 first item will be used as a default auto-update server, so, in this example app will use github as auto-update provider):\n\n\"win\"\n:\n \n{\n\n  \n\"publish\"\n:\n \n[\n\"github\"\n,\n \n\"bintray\"\n]\n\n\n}\n\n\n\n\n\n\nMacros\n\n\nIn all publish options \nFile Macros\n are supported.\n\n\n\n\nHow to Publish\n\u00b6\n\n\nExcerpt from \nCLI Usage\n of \nelectron-builder\n command:\n\nPublishing:\n  --publish, -p  [choices: \"onTag\", \"onTagOrDraft\", \"always\", \"never\"]\n\n\nCLI \n--publish\n option values:\n\n\n\n\n\n\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nonTag\n\n\non tag push only\n\n\n\n\n\n\nonTagOrDraft\n\n\non tag push or if draft release exists\n\n\n\n\n\n\nalways\n\n\nalways publish\n\n\n\n\n\n\nnever\n\n\nnever publish\n\n\n\n\n\n\n\n\nBut please consider using automatic rules instead of explicitly specifying \npublish\n:\n\n\n\n\n\n\nIf CI server detected, \u2014 \nonTagOrDraft\n.\n\n\n\n\n\n\nIf CI server reports that tag was pushed, \u2014 \nonTag\n.\n\n\n\n\n\n\nRelease will be drafted (if doesn\u2019t already exist) and artifacts published only if tag was pushed.\n\n\n\n\nIf \nnpm script\n named \nrelease\n, \u2014 \nalways\n.\n\n\n\n\nAdd to \nscripts\n in the development \npackage.json\n:\n \n\"release\"\n:\n \n\"build\"\n\n\n\n and if you run \nyarn release\n, a release will be drafted (if doesn\u2019t already exist) and artifacts published.\n\n\nRecommended GitHub Releases Workflow\n\u00b6\n\n\n\n\n\n\nDraft a new release\n. Set the \u201cTag version\u201d to the value of \nversion\n in your application \npackage.json\n, and prefix it with \nv\n. \u201cRelease title\u201d can be anything you want.\n\n\nFor example, if your application \npackage.json\n version is \n1.0\n, your draft\u2019s \u201cTag version\u201d would be \nv1.0\n.\n\n\n\n\n\n\nPush some commits. Every CI build will update the artifacts attached to this draft.\n\n\n\n\nOnce you are done, publish the release. GitHub will tag the latest commit for you.\n\n\n\n\nThe benefit of this workflow is that it allows you to always have the latest artifacts, and the release can be published once it is ready.\n\n\nContinuous Deployment Workflow on Amazon S3 and other non-GitHub\n\u00b6\n\n\nThis example workflow is modelled on how releases are handled in maven (it is an example of one of many possible workflows, you are not forced to follow it).\n\n\n\n\nSetup your CI to publish on each commit. E.g. \n\"dist\": \"electron-builder --publish always\"\n in your \npackage.json\n.\n\n\nSet your version in your application \npackage.json\n to \n1.9.0-snapshot\n (or \n1.9.0-master\n or whatever you want your development channel to be named). This will publish a file named \nsnapshot.yml\n and a build named \nsomething-snapshot.exe\n (and corresponding for mac) to S3.\n\n\nWhen you are ready to deploy, simply change you package version to \n1.9.0\n and push. This will then produce a \nlatest.yml\n and \nsomething.exe\n on s3. Usually you\u2019ll git-tag this version as well (just to keep track of it).\n\n\nChange the version back to a snapshot version right after, i.e. \n1.10.0-snapshot\n, and commit it.\n\n\n\n\nGitHub Repository and Bintray Package\n\u00b6\n\n\nDetected automatically using:\n\n\n\n\nrepository\n in the application or development \npackage.json\n,\n\n\nif not set, env \n\n\nTRAVIS_REPO_SLUG\n \n\n\nor \nAPPVEYOR_REPO_NAME\n \n\n\nor \nCIRCLE_PROJECT_USERNAME\n/\nCIRCLE_PROJECT_REPONAME\n,\n\n\n\n\n\n\nif no env, from \n.git/config\n origin url.\n\n\n\n\n\n\n\nBintrayOptions\n\u00b6\n\n\nBintray\n options. Requires an API key. An API key can be obtained from the user \nprofile\n page (\u201cEdit Your Profile\u201d -> API Key).\nDefine \nBT_TOKEN\n environment variable.\n\n\n\n\nprovider\n \u201cbintray\u201d - The provider. Must be \nbintray\n.\n\n\npackage\n String - The Bintray package name.\n\n\nrepo\n = \ngeneric\n String - The Bintray repository name.\n\n\nowner\n String - The owner.\n\n\ncomponent\n String - The Bintray component (Debian only).\n\n\ndistribution\n = \nstable\n String - The Bintray distribution (Debian only).\n\n\nuser\n String - The Bintray user account. Used in cases where the owner is an organization.\n\n\ntoken\n String\n\n\n\n\nInherited from \nPublishConfiguration\n:\n\n\n\n\n\n\npublishAutoUpdate\n = \ntrue\n Boolean - Whether to publish auto update info files.\n\n\nAuto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.\n\n\n\n\n\n\nGenericServerOptions\n\u00b6\n\n\nGeneric (any HTTP(S) server) options.\nIn all publish options \nFile Macros\n are supported.\n\n\n\n\nprovider\n \u201cgeneric\u201d - The provider. Must be \ngeneric\n.\n\n\nurl\n String - The base url. e.g. \nhttps://bucket_name.s3.amazonaws.com\n.\n\n\nchannel\n = \nlatest\n String - The channel.\n\n\nuseMultipleRangeRequest\n Boolean - Whether to use multiple range requests for differential update. Defaults to \ntrue\n if \nurl\n doesn\u2019t contain \ns3.amazonaws.com\n.\n\n\n\n\nInherited from \nPublishConfiguration\n:\n\n\n\n\n\n\npublishAutoUpdate\n = \ntrue\n Boolean - Whether to publish auto update info files.\n\n\nAuto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.\n\n\n\n\n\n\nGithubOptions\n\u00b6\n\n\nGitHub\n options.\n\n\nGitHub \npersonal access token\n is required. You can generate by going to \nhttps://github.com/settings/tokens/new\n. The access token should have the repo scope/permission.\nDefine \nGH_TOKEN\n environment variable.\n\n\n\n\nprovider\n \u201cgithub\u201d - The provider. Must be \ngithub\n.\n\n\nrepo\n String - The repository name. \nDetected automatically\n.\n\n\nowner\n String - The owner.\n\n\nvPrefixedTagName\n = \ntrue\n Boolean - Whether to use \nv\n-prefixed tag name.\n\n\nhost\n = \ngithub.com\n String - The host (including the port if need).\n\n\nprotocol\n = \nhttps\n \u201chttps\u201d | \u201chttp\u201d - The protocol. GitHub Publisher supports only \nhttps\n.\n\n\ntoken\n String - The access token to support auto-update from private github repositories. Never specify it in the configuration files. Only for \nsetFeedURL\n.\n\n\nprivate\n Boolean - Whether to use private github auto-update provider if \nGH_TOKEN\n environment variable is defined. See \nPrivate GitHub Update Repo\n.\n\n\n\n\nreleaseType\n = \ndraft\n \u201cdraft\u201d | \u201cprerelease\u201d | \u201crelease\u201d - The type of release. By default \ndraft\n release will be created.\n\n\nAlso you can set release type using environment variable. If \nEP_DRAFT\nis set to \ntrue\n \u2014 \ndraft\n, if \nEP_PRE_RELEASE\nis set to \ntrue\n \u2014 \nprerelease\n.\n\n\n\n\n\n\nInherited from \nPublishConfiguration\n:\n\n\n\n\n\n\npublishAutoUpdate\n = \ntrue\n Boolean - Whether to publish auto update info files.\n\n\nAuto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.\n\n\n\n\n\n\n\n\n\nS3Options\n\u00b6\n\n\nAmazon S3\n options.\n\n\nAWS credentials are required, please see \ngetting your credentials\n.\nDefine \nAWS_ACCESS_KEY_ID\n and \nAWS_SECRET_ACCESS_KEY\n \nenvironment variables\n.\nOr in the \n~/.aws/credentials\n.\n\n\nExample configuration:\n\n\"publish\"\n:\n \n{\n\n  \n\"provider\"\n:\n \n\"s3\"\n,\n\n  \n\"bucket\"\n:\n \n\"bucket-name\"\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\nprovider\n \u201cs3\u201d - The provider. Must be \ns3\n.\n\n\nbucket\n String - The bucket name.\n\n\nregion\n String - The region. Is determined and set automatically when publishing.\n\n\n\n\nacl\n = \npublic-read\n \u201cprivate\u201d | \u201cpublic-read\u201d - The ACL. Set to \nnull\n to not \nadd\n.\n\n\nPlease see \nrequired permissions for the S3 provider\n.\n\n\n\n\n\n\nstorageClass\n = \nSTANDARD\n \u201cSTANDARD\u201d | \u201cREDUCED_REDUNDANCY\u201d | \u201cSTANDARD_IA\u201d - The type of storage to use for the object.\n\n\n\n\nencryption\n \u201cAES256\u201d | \u201caws:kms\u201d - Server-side encryption algorithm to use for the object.\n\n\nendpoint\n String - The endpoint URI to send requests to. The default endpoint is built from the configured region. The endpoint should be a string like \nhttps://{service}.{region}.amazonaws.com\n.\n\n\nchannel\n = \nlatest\n String - The update channel.\n\n\npath\n = \n/\n String - The directory path.\n<!\u2013 end of generated block \u2013\n\n\n\n\n\n\n\n\n\n\nSpacesOptions\n\u00b6\n\n\nDigitalOcean Spaces\n options.\nAccess key is required, define \nDO_KEY_ID\n and \nDO_SECRET_KEY\n environment variables.\n\n\n\n\nprovider\n \u201cspaces\u201d - The provider. Must be \nspaces\n.\n\n\nname\n String - The space name.\n\n\nregion\n String - The region (e.g. \nnyc3\n).\n\n\nchannel\n = \nlatest\n String - The update channel.\n\n\npath\n = \n/\n String - The directory path.\n\n\nacl\n = \npublic-read\n \u201cprivate\u201d | \u201cpublic-read\u201d - The ACL. Set to \nnull\n to not \nadd\n.",
            "title": "Publish"
        },
        {
            "location": "/configuration/publish/#how-to-publish",
            "text": "Excerpt from  CLI Usage  of  electron-builder  command: Publishing:\n  --publish, -p  [choices: \"onTag\", \"onTagOrDraft\", \"always\", \"never\"] \nCLI  --publish  option values:     Value  Description      onTag  on tag push only    onTagOrDraft  on tag push or if draft release exists    always  always publish    never  never publish     But please consider using automatic rules instead of explicitly specifying  publish :    If CI server detected, \u2014  onTagOrDraft .    If CI server reports that tag was pushed, \u2014  onTag .    Release will be drafted (if doesn\u2019t already exist) and artifacts published only if tag was pushed.   If  npm script  named  release , \u2014  always .   Add to  scripts  in the development  package.json :\n  \"release\" :   \"build\"  \n and if you run  yarn release , a release will be drafted (if doesn\u2019t already exist) and artifacts published.",
            "title": "How to Publish"
        },
        {
            "location": "/configuration/publish/#recommended-github-releases-workflow",
            "text": "Draft a new release . Set the \u201cTag version\u201d to the value of  version  in your application  package.json , and prefix it with  v . \u201cRelease title\u201d can be anything you want.  For example, if your application  package.json  version is  1.0 , your draft\u2019s \u201cTag version\u201d would be  v1.0 .    Push some commits. Every CI build will update the artifacts attached to this draft.   Once you are done, publish the release. GitHub will tag the latest commit for you.   The benefit of this workflow is that it allows you to always have the latest artifacts, and the release can be published once it is ready.",
            "title": "Recommended GitHub Releases Workflow"
        },
        {
            "location": "/configuration/publish/#continuous-deployment-workflow-on-amazon-s3-and-other-non-github",
            "text": "This example workflow is modelled on how releases are handled in maven (it is an example of one of many possible workflows, you are not forced to follow it).   Setup your CI to publish on each commit. E.g.  \"dist\": \"electron-builder --publish always\"  in your  package.json .  Set your version in your application  package.json  to  1.9.0-snapshot  (or  1.9.0-master  or whatever you want your development channel to be named). This will publish a file named  snapshot.yml  and a build named  something-snapshot.exe  (and corresponding for mac) to S3.  When you are ready to deploy, simply change you package version to  1.9.0  and push. This will then produce a  latest.yml  and  something.exe  on s3. Usually you\u2019ll git-tag this version as well (just to keep track of it).  Change the version back to a snapshot version right after, i.e.  1.10.0-snapshot , and commit it.",
            "title": "Continuous Deployment Workflow on Amazon S3 and other non-GitHub"
        },
        {
            "location": "/configuration/publish/#github-repository-and-bintray-package",
            "text": "Detected automatically using:   repository  in the application or development  package.json ,  if not set, env   TRAVIS_REPO_SLUG    or  APPVEYOR_REPO_NAME    or  CIRCLE_PROJECT_USERNAME / CIRCLE_PROJECT_REPONAME ,    if no env, from  .git/config  origin url.",
            "title": "GitHub Repository and Bintray Package"
        },
        {
            "location": "/configuration/publish/#bintrayoptions",
            "text": "Bintray  options. Requires an API key. An API key can be obtained from the user  profile  page (\u201cEdit Your Profile\u201d -> API Key).\nDefine  BT_TOKEN  environment variable.   provider  \u201cbintray\u201d - The provider. Must be  bintray .  package  String - The Bintray package name.  repo  =  generic  String - The Bintray repository name.  owner  String - The owner.  component  String - The Bintray component (Debian only).  distribution  =  stable  String - The Bintray distribution (Debian only).  user  String - The Bintray user account. Used in cases where the owner is an organization.  token  String   Inherited from  PublishConfiguration :    publishAutoUpdate  =  true  Boolean - Whether to publish auto update info files.  Auto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
            "title": "BintrayOptions"
        },
        {
            "location": "/configuration/publish/#genericserveroptions",
            "text": "Generic (any HTTP(S) server) options.\nIn all publish options  File Macros  are supported.   provider  \u201cgeneric\u201d - The provider. Must be  generic .  url  String - The base url. e.g.  https://bucket_name.s3.amazonaws.com .  channel  =  latest  String - The channel.  useMultipleRangeRequest  Boolean - Whether to use multiple range requests for differential update. Defaults to  true  if  url  doesn\u2019t contain  s3.amazonaws.com .   Inherited from  PublishConfiguration :    publishAutoUpdate  =  true  Boolean - Whether to publish auto update info files.  Auto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
            "title": "GenericServerOptions"
        },
        {
            "location": "/configuration/publish/#githuboptions",
            "text": "GitHub  options.  GitHub  personal access token  is required. You can generate by going to  https://github.com/settings/tokens/new . The access token should have the repo scope/permission.\nDefine  GH_TOKEN  environment variable.   provider  \u201cgithub\u201d - The provider. Must be  github .  repo  String - The repository name.  Detected automatically .  owner  String - The owner.  vPrefixedTagName  =  true  Boolean - Whether to use  v -prefixed tag name.  host  =  github.com  String - The host (including the port if need).  protocol  =  https  \u201chttps\u201d | \u201chttp\u201d - The protocol. GitHub Publisher supports only  https .  token  String - The access token to support auto-update from private github repositories. Never specify it in the configuration files. Only for  setFeedURL .  private  Boolean - Whether to use private github auto-update provider if  GH_TOKEN  environment variable is defined. See  Private GitHub Update Repo .   releaseType  =  draft  \u201cdraft\u201d | \u201cprerelease\u201d | \u201crelease\u201d - The type of release. By default  draft  release will be created.  Also you can set release type using environment variable. If  EP_DRAFT is set to  true  \u2014  draft , if  EP_PRE_RELEASE is set to  true  \u2014  prerelease .    Inherited from  PublishConfiguration :    publishAutoUpdate  =  true  Boolean - Whether to publish auto update info files.  Auto update relies only on the first provider in the list (you can specify several publishers). Thus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
            "title": "GithubOptions"
        },
        {
            "location": "/configuration/publish/#s3options",
            "text": "Amazon S3  options.  AWS credentials are required, please see  getting your credentials .\nDefine  AWS_ACCESS_KEY_ID  and  AWS_SECRET_ACCESS_KEY   environment variables .\nOr in the  ~/.aws/credentials .  Example configuration: \"publish\" :   { \n   \"provider\" :   \"s3\" , \n   \"bucket\" :   \"bucket-name\"  }      provider  \u201cs3\u201d - The provider. Must be  s3 .  bucket  String - The bucket name.  region  String - The region. Is determined and set automatically when publishing.   acl  =  public-read  \u201cprivate\u201d | \u201cpublic-read\u201d - The ACL. Set to  null  to not  add .  Please see  required permissions for the S3 provider .    storageClass  =  STANDARD  \u201cSTANDARD\u201d | \u201cREDUCED_REDUNDANCY\u201d | \u201cSTANDARD_IA\u201d - The type of storage to use for the object.   encryption  \u201cAES256\u201d | \u201caws:kms\u201d - Server-side encryption algorithm to use for the object.  endpoint  String - The endpoint URI to send requests to. The default endpoint is built from the configured region. The endpoint should be a string like  https://{service}.{region}.amazonaws.com .  channel  =  latest  String - The update channel.  path  =  /  String - The directory path.\n<!\u2013 end of generated block \u2013",
            "title": "S3Options"
        },
        {
            "location": "/configuration/publish/#spacesoptions",
            "text": "DigitalOcean Spaces  options.\nAccess key is required, define  DO_KEY_ID  and  DO_SECRET_KEY  environment variables.   provider  \u201cspaces\u201d - The provider. Must be  spaces .  name  String - The space name.  region  String - The region (e.g.  nyc3 ).  channel  =  latest  String - The update channel.  path  =  /  String - The directory path.  acl  =  public-read  \u201cprivate\u201d | \u201cpublic-read\u201d - The ACL. Set to  null  to not  add .   < !-- end of generated block --",
            "title": "SpacesOptions"
        },
        {
            "location": "/tutorials/loading-app-dependencies-manually/",
            "text": "Warning\n\n\nImportant: This approach must be used only in development environment.\nSince the release version of your application the \napp\n directory should self contain all used files.\n\n\n\n\nIn case on development environment your app runs the main process (executed by electron) not inside the \n/app\n folder. You may need to load the \n/app\n dependencies manually. Because the app dependencies are be placed at \n/app/node_modules\n and your main process that is running in a different directory will not have access by default to that directory.\n\n\nInstead of duplicating the app dependencies in the development \npackage.json\n it is possible to make the electron main process load the app dependencies manually with an approach like this:\n\n\n// given this file is: /src/browser/main.js\n\n\n\nconst\n \npath\n \n=\n \nrequire\n(\n'path'\n)\n\n\nconst\n \ndevMode\n \n=\n \n(\nprocess\n.\nargv\n \n||\n \n[]).\nindexOf\n(\n'--dev'\n)\n \n!==\n \n-\n1\n\n\n\nif\n \n(\ndevMode\n)\n \n{\n\n  \n// load the app dependencies\n\n  \nconst\n \nPATH_APP_NODE_MODULES\n \n=\n \npath\n.\njoin\n(\n__dirname\n,\n \n'..'\n,\n \n'..'\n,\n \n'app'\n,\n \n'node_modules'\n)\n\n  \nrequire\n(\n'module'\n).\nglobalPaths\n.\npush\n(\nPATH_APP_NODE_MODULES\n)\n\n\n}",
            "title": "Loading App Dependencies Manually"
        },
        {
            "location": "/tutorials/two-package-structure/",
            "text": "Info\n\n\nSince version 8 electron-builder rebuilds only production dependencies, so, you are not forced to use two package.json structure.\n\n\n\n\n\n\n\n\nFor development (\n./package.json\n)\n\n\nThe \npackage.json\n resides in the root of your project. Here you declare the dependencies for your development environment and build scripts (\ndevDependencies\n).\n\n\n\n\n\n\nFor your application (\n./app/package.json\n)\n\n\nThe \npackage.json\n resides in the \napp\n directory. Declare your application dependencies (\ndependencies\n) here. \nOnly this directory is distributed with the final, packaged application.\n\n\n\n\n\n\nWhy?\n\n\n\n\nNative npm modules (those written in C, not JavaScript) need to be compiled and here we have two different compilation targets for them. Those used within the application need to be compiled against the electron runtime and all \ndevDependencies\n need to be compiled against your local node.js environment. Thanks to the two \npackage.json\n structure, this is trivial (see \n#39\n).\n\n\nNo need to specify which \nfiles\n to include in the app (because development files reside outside the \napp\n directory).\n\n\n\n\nPlease see \nLoading App Dependencies Manually\n and \n#379\n.\n\n\nIf you use the two-package.json project structure, you\u2019ll only have your \ndevDependencies\n in your development \npackage.json\n and your \ndependencies\n in your app \npackage.json\n. To ensure your dependencies are always updated based on both files, simply add \n\"postinstall\": \"electron-builder install-app-deps\"\n to your development \npackage.json\n. This will basically automatically trigger an \nnpm install\n within your app directory so you don\u2019t have to do this work every time you install/update your dependencies.",
            "title": "Two package.json Structure"
        },
        {
            "location": "/tutorials/macos-kernel-extensions/",
            "text": "Installing macOS kernel extensions with \nelectron-builder\n can be done using scripts.\n\n\nFirst, in \npackage.json\n, make sure you\u2019re building a package (\n.pkg\n) and not the default \n.dmg\n:\n\n\n\"mac\"\n:\n \n{\n \n  \n\"target\"\n:\n \n\"pkg\"\n\n\n}\n\n\n\n\n\nPlace your script and the kernel extensions in \nbuild/pkg-scripts\n, or \ndefine a custom directory\n. Note that the script \nmust\n be called either \npreinstall\n or \npostinstall\n.  Remember to use \n#!/bin/sh\n as the first line in your script. Also, your script must be executable (\nchmod +x <filename>\n).\n\n\nAn example script:\n\n#!/bin/sh\n\n\n\necho\n \n\"Unloading and uninstalling old extensions...\"\n\n\n# unload old extensions\n\nsudo kextunload /Library/Extensions/myExt.kext\n\n\n# delete old extensions\n\nsudo rm -rf /Library/Extensions/myExtension.kext\n\n\n# install new extensions\n\n\necho\n \n\"Installing and loading new extensions...\"\n\nsudo cp -R myExt.kext /Library/Extensions/myExt.kext\nsudo kextload /Library/Extensions/myExt.kext/",
            "title": "macOS Kernel Extensions"
        },
        {
            "location": "/tutorials/release-using-channels/",
            "text": "Release Using Channels / Auto-Updates With Channels\n\u00b6\n\n\nDescription\n\u00b6\n\n\nChannels are useful to distribute \u201cbeta\u201d or \u201calpha\u201d releases of your application to a chosen set of users. This allows to test an application before release it as \u201clatest\u201d (stable).\n\n\nUsers which receive \u201cbeta\u201d version will get \u201clatest\u201d versions too. Otherwise, users who don\u2019t want \u201cbeta\u201d will only get \u201clatest\u201d releases.\n\n\nThere are three channels, ordered by stability:\n\n\n\n\n\u201clatest\u201d, your application is stable and this is the default one (example: \n1.3.2\n),\n\n\n\u201cbeta\u201d which means your application works, but should have some bugs (example: \n1.3.2-beta\n)\n\n\n\u201calpha\u201d which means your application is not stable and in active development (example: \n1.3.2-alpha\n)\n\n\n\n\nConfiguration\n\u00b6\n\n\nTo release using channels, you should config electron-builder and define the channels to use in client side.\n\n\nElectron-Builder\n\u00b6\n\n\nBy default (without using channels), all application releases use the \u201clatest\u201d channel.\n\n\nIf you want to use channels, you should add this to your package.json:\n\n\n\"version\"\n:\n \n\"x.x.x-beta\"\n,\n\n\n...\n\n\n\"build\"\n:\n \n{\n\n  \n\"generateUpdatesFilesForAllChannels\"\n:\n \ntrue\n,\n\n  \n...\n\n\n}\n\n\n\n\n\n\n\nNote\n\n\nallowDowngrade\n is automatically set to \ntrue\n when \ngenerateUpdatesFilesForAllChannels = true\n, so you don\u2019t need to set it.\n\n\n\n\nAll you have to do to release using channels is to define the channel in the version tag of the \npackage.json\n. Add \u201c-beta\u201d or \u201c-alpha\u201d (nothing for \u201clatest\u201d) to automatically build for the related channel.\n\n\nYour Application\n\u00b6\n\n\nAll you need to do here is to define which channel the user will receive with:\n\n\nautoUpdater.channel = \"beta\"\n (see \nthe documentation here\n)\n\n\nThe following versions will be distributed to users depending on the channel defined:\n\n\n\n\nlatest\n or nothing: users will only get \u201clatest\u201d versions\n\n\nbeta\n: users will get \u201cbeta\u201d and \u201clatest\u201d version\n\n\nalpha\n: users will get \u201calpha\u201d, \u201cbeta\u201d and \u201clatest\u201d version\n\n\n\n\nHow To Use It\n\u00b6\n\n\nImagine that your application is stable and in version 1.0.1.\n\n\nIf you want to release a beta for the new 1.1.0 version, you only need to update the \npackage.json\n \nversion\n with \n1.1.0-beta\n.\n\n\nWhen your application is stable enough, you want to release it to all users. For that, you only need to remove the \n-beta\n label from the package.json \nversion\n tag.",
            "title": "Release Using Channels"
        },
        {
            "location": "/tutorials/release-using-channels/#release-using-channels-auto-updates-with-channels",
            "text": "",
            "title": "Release Using Channels / Auto-Updates With Channels"
        },
        {
            "location": "/tutorials/release-using-channels/#description",
            "text": "Channels are useful to distribute \u201cbeta\u201d or \u201calpha\u201d releases of your application to a chosen set of users. This allows to test an application before release it as \u201clatest\u201d (stable).  Users which receive \u201cbeta\u201d version will get \u201clatest\u201d versions too. Otherwise, users who don\u2019t want \u201cbeta\u201d will only get \u201clatest\u201d releases.  There are three channels, ordered by stability:   \u201clatest\u201d, your application is stable and this is the default one (example:  1.3.2 ),  \u201cbeta\u201d which means your application works, but should have some bugs (example:  1.3.2-beta )  \u201calpha\u201d which means your application is not stable and in active development (example:  1.3.2-alpha )",
            "title": "Description"
        },
        {
            "location": "/tutorials/release-using-channels/#configuration",
            "text": "To release using channels, you should config electron-builder and define the channels to use in client side.",
            "title": "Configuration"
        },
        {
            "location": "/tutorials/release-using-channels/#electron-builder",
            "text": "By default (without using channels), all application releases use the \u201clatest\u201d channel.  If you want to use channels, you should add this to your package.json:  \"version\" :   \"x.x.x-beta\" ,  ...  \"build\" :   { \n   \"generateUpdatesFilesForAllChannels\" :   true , \n   ...  }    Note  allowDowngrade  is automatically set to  true  when  generateUpdatesFilesForAllChannels = true , so you don\u2019t need to set it.   All you have to do to release using channels is to define the channel in the version tag of the  package.json . Add \u201c-beta\u201d or \u201c-alpha\u201d (nothing for \u201clatest\u201d) to automatically build for the related channel.",
            "title": "Electron-Builder"
        },
        {
            "location": "/tutorials/release-using-channels/#your-application",
            "text": "All you need to do here is to define which channel the user will receive with:  autoUpdater.channel = \"beta\"  (see  the documentation here )  The following versions will be distributed to users depending on the channel defined:   latest  or nothing: users will only get \u201clatest\u201d versions  beta : users will get \u201cbeta\u201d and \u201clatest\u201d version  alpha : users will get \u201calpha\u201d, \u201cbeta\u201d and \u201clatest\u201d version",
            "title": "Your Application"
        },
        {
            "location": "/tutorials/release-using-channels/#how-to-use-it",
            "text": "Imagine that your application is stable and in version 1.0.1.  If you want to release a beta for the new 1.1.0 version, you only need to update the  package.json   version  with  1.1.0-beta .  When your application is stable enough, you want to release it to all users. For that, you only need to remove the  -beta  label from the package.json  version  tag.",
            "title": "How To Use It"
        },
        {
            "location": "/icons/",
            "text": "Recommended tools: \nAppIcon Generator\n, \nMakeAppIcon\n, \niConvert Icons\n.\n\n\nmacOS\n\u00b6\n\n\nFiles\n\n\n\n\nOptional\n \nicon.icns\n (macOS app icon) or \nicon.png\n. Icon size should be at least 512x512.\n\n\nOptional\n \nbackground.png\n (macOS DMG background).\n\n\nOptional\n \nbackground@2x.png\n (macOS DMG Retina background).\n\n\n\n\nneed to be placed in the \nbuild\n directory. All files are optional \u2014 but it is important to provide \nicon.icns\n (or \nicon.png\n), otherwise default Electron icon will be used.\n\n\nWindows (NSIS)\n\u00b6\n\n\n\n\nOptional\n \nicon.ico\n (Windows app icon) or \nicon.png\n. Icon size should be at least 256x256.\n\n\n\n\nneed to be placed in the \nbuild\n directory. It is important to provide \nicon.ico\n (or \nicon.png\n), otherwise default Electron icon will be used.\n\n\nLinux\n\u00b6\n\n\nLinux icon set will be generated automatically based on the macOS \nicns\n file or common \nicon.png\n.\n\n\nOr you can put them into the \nbuild/icons\n directory if you want to specify them yourself.\nThe filename must contain the size (e.g. \n32x32.png\n) of the icon). Recommended sizes: 16, 24, 32, 48, 64, 96, 128, 256. (or just 512).\n\n\nAppX\n\u00b6\n\n\nSee \nAppX Assets\n.",
            "title": "Icons"
        },
        {
            "location": "/icons/#macos",
            "text": "Files   Optional   icon.icns  (macOS app icon) or  icon.png . Icon size should be at least 512x512.  Optional   background.png  (macOS DMG background).  Optional   background@2x.png  (macOS DMG Retina background).   need to be placed in the  build  directory. All files are optional \u2014 but it is important to provide  icon.icns  (or  icon.png ), otherwise default Electron icon will be used.",
            "title": "macOS"
        },
        {
            "location": "/icons/#windows-nsis",
            "text": "Optional   icon.ico  (Windows app icon) or  icon.png . Icon size should be at least 256x256.   need to be placed in the  build  directory. It is important to provide  icon.ico  (or  icon.png ), otherwise default Electron icon will be used.",
            "title": "Windows (NSIS)"
        },
        {
            "location": "/icons/#linux",
            "text": "Linux icon set will be generated automatically based on the macOS  icns  file or common  icon.png .  Or you can put them into the  build/icons  directory if you want to specify them yourself.\nThe filename must contain the size (e.g.  32x32.png ) of the icon). Recommended sizes: 16, 24, 32, 48, 64, 96, 128, 256. (or just 512).",
            "title": "Linux"
        },
        {
            "location": "/icons/#appx",
            "text": "See  AppX Assets .",
            "title": "AppX"
        },
        {
            "location": "/auto-update/",
            "text": "See \npublish configuration\n for information on how to configure your local or CI environment for automated deployments.\n\n\nSimplified auto-update is supported on Windows if you use the default NSIS target, but is not supported for Squirrel.Windows.\n\n\nDifferences between electron-updater and built-in autoUpdater\n\u00b6\n\n\n\n\nIt doesn\u2019t require a dedicated release server.\n\n\nCode signature validation not only on macOS, but also on Windows.\n\n\nelectron-builder produces and publishes all required metadata files and artifacts.\n\n\nDownload progress supported on all platforms.\n\n\nStaged rollouts\n supported on all platforms.\n\n\nActually, built-in autoUpdater is used inside on macOS.\n\n\nDifferent providers supported out of the box (\nGitHub Releases\n, \nAmazon S3\n, \nDigitalOcean Spaces\n, \nBintray\n and generic HTTP(s) server).\n\n\nYou need only 2 lines of code to make it work.\n\n\n\n\nQuick Setup Guide\n\u00b6\n\n\n\n\n\n\nInstall \nelectron-updater\n as an app dependency.\n\n\n\n\n\n\nConfigure publish\n.\n\n\n\n\n\n\nUse \nautoUpdater\n from \nelectron-updater\n instead of \nelectron\n:\n\n\nimport\n \n{\n \nautoUpdater\n \n}\n \nfrom\n \n\"electron-updater\"\n\n\n\n\n\nOr if you don\u2019t use ES6: \nconst { autoUpdater } = require(\"electron-updater\")\n\n\n\n\n\n\nCall \nautoUpdater.checkForUpdatesAndNotify()\n. Or, if you need custom behaviour, implement \nelectron-updater\n events, check examples below.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nDo not call \nsetFeedURL\n. electron-builder automatically creates \napp-update.yml\n file for you on build in the \nresources\n (this file is internal, you don\u2019t need to be aware of it).\n\n\nzip\n target for macOS is \nrequired\n for Squirrel.Mac, otherwise \nlatest-mac.yml\n cannot be created, which causes \nautoUpdater\n error. Default \ntarget\n for macOS is \ndmg\n+\nzip\n, so there is no need to explicitly specify target.\n\n\n\n\n\n\nExamples\n\u00b6\n\n\n\n\nExample in Typescript\n using system notifications.\n\n\nA \ncomplete example\n showing how to use.\n\n\nAn \nencapsulated manual update via menu\n.\n\n\n\n\nDebugging\n\u00b6\n\n\nYou don\u2019t need to listen all events to understand what\u2019s wrong. Just set \nlogger\n.\n\nelectron-log\n is recommended (it is an additional dependency that you can install if needed).\n\n\nautoUpdater\n.\nlogger\n \n=\n \nrequire\n(\n\"electron-log\"\n)\n\n\nautoUpdater\n.\nlogger\n.\ntransports\n.\nfile\n.\nlevel\n \n=\n \n\"info\"\n\n\n\n\n\nNote that in order to develop/test UI/UX of updating without packaging the application you need to have a file named \ndev-app-update.yml\n in the root of your project, which matches your \npublish\n setting from electron-builder config (but in \nYAML\n format).\n\n\nStaged Rollouts\n\u00b6\n\n\nStaged rollouts allow you to distribute the latest version of your app to a subset of users that you can increase over time, similar to rollouts on platforms like Google Play.\n\n\nStaged rollouts are controlled by manually editing your \nlatest.yml\n / \nlatest-mac.yml\n (channel update info file).\n\n\nversion: 1.1.0\npath: TestApp Setup 1.1.0.exe\nsha512: Dj51I0q8aPQ3ioaz9LMqGYujAYRbDNblAQbodDRXAMxmY6hsHqEl3F6SvhfJj5oPhcqdX1ldsgEvfMNXGUXBIw==\nstagingPercentage: 10\n\n\n\n\nUpdate will be shipped to 10% of userbase.\n\n\nIf you want to pull a staged release because it hasn\u2019t gone well, you \nmust\n increment the version number higher than your broken release.\nBecause some of your users will be on the broken 1.0.1, releasing a new 1.0.1 would result in them staying on a broken version.\n\n\nFile Generated and Uploaded in Addition\n\u00b6\n\n\nlatest.yml\n (or \nlatest-mac.yml\n for macOS, or \nlatest-linux.yml\n for Linux) will be generated and uploaded for all providers except \nbintray\n (because not required, \nbintray\n doesn\u2019t use \nlatest.yml\n).\n\n\nPrivate GitHub Update Repo\n\u00b6\n\n\nYou can use a private repository for updates with electron-updater by setting the \nGH_TOKEN\n environment variable (on user machine) and \nprivate\n option.\nIf \nGH_TOKEN\n is set, electron-updater will use the GitHub API for updates allowing private repositories to work.\n\n\n\n\nWarning\n\n\nPrivate GitHub provider only for \nvery special\n cases \u2014 not intended and not suitable for all users.\n\n\n\n\n\n\nNote\n\n\nThe GitHub API currently has a rate limit of 5000 requests per user per hour. An update check uses up to 3 requests per check.\n\n\n\n\nEvents\n\u00b6\n\n\nThe \nautoUpdater\n object emits the following events:\n\n\nEvent: \nerror\n\u00b6\n\n\n\n\nerror\n Error\n\n\n\n\nEmitted when there is an error while updating.\n\n\nEvent: \nchecking-for-update\n\u00b6\n\n\nEmitted when checking if an update has started.\n\n\nEvent: \nupdate-available\n\u00b6\n\n\n\n\ninfo\n \nUpdateInfo\n (for generic and github providers) | \nVersionInfo\n (for Bintray provider)\n\n\n\n\nEmitted when there is an available update. The update is downloaded automatically if \nautoDownload\n is \ntrue\n.\n\n\nEvent: \nupdate-not-available\n\u00b6\n\n\nEmitted when there is no available update.\n\n\n\n\ninfo\n \nUpdateInfo\n (for generic and github providers) | \nVersionInfo\n (for Bintray provider)\n\n\n\n\nEvent: \ndownload-progress\n\u00b6\n\n\n\n\nprogress\n ProgressInfo\n\n\nbytesPerSecond\n\n\npercent\n\n\ntotal\n\n\ntransferred\n\n\n\n\nEmitted on progress.\n\n\nEvent: \nupdate-downloaded\n\u00b6\n\n\n\n\ninfo\n \nUpdateInfo\n \u2014 for generic and github providers. \nVersionInfo\n for Bintray provider.\n\n\n\n\n\n\n\nAPI\n\u00b6\n\n\n\n\nAppUpdater\n \u21d0 \nEventEmitter\n\n\nLogger\n\n\nUpdateInfo\n\n\nUpdateCheckResult\n\n\nUpdaterSignal\n\n\n\n\n\n\nAppUpdater \u21d0 \nEventEmitter\n\u00b6\n\n\nKind\n: class of \nelectron-updater\n\n\nExtends\n: \nEventEmitter\n\n\nProperties\n\n\n\n\nautoDownload\n = \ntrue\n Boolean - Whether to automatically download an update when it is found.\n\n\n\n\nautoInstallOnAppQuit\n = \ntrue\n Boolean - Whether to automatically install a downloaded update on app quit (if \nquitAndInstall\n was not called before).\n\n\nApplicable only on Windows and Linux.\n\n\n\n\n\n\nallowPrerelease\n = \nfalse\n Boolean - \nGitHub provider only.\n Whether to allow update to pre-release versions. Defaults to \ntrue\n if application version contains prerelease components (e.g. \n0.12.1-alpha.1\n, here \nalpha\n is a prerelease component), otherwise \nfalse\n.\n\n\nIf \ntrue\n, downgrade will be allowed (\nallowDowngrade\n will be set to \ntrue\n).\n\n\n\n\n\n\nfullChangelog\n = \nfalse\n Boolean - \nGitHub provider only.\n Get all release notes (from current version to latest), not just the latest.\n\n\n\n\nallowDowngrade\n = \nfalse\n Boolean - Whether to allow version downgrade (when a user from the beta channel wants to go back to the stable channel).\n\n\ncurrentVersion\n String - The current application version.\n\n\nchannel\n String - Get the update channel. Not applicable for GitHub. Doesn\u2019t return \nchannel\n from the update configuration, only if was previously set.\n\n\nrequestHeaders\n [key: string]: string - The request headers.\n\n\nlogger\n \nLogger\n - The logger. You can pass \nelectron-log\n, \nwinston\n or another logger with the following interface: \n{ info(), warn(), error() }\n. Set it to \nnull\n if you would like to disable a logging feature.\n\n\nsignals\n = \nnew UpdaterSignal(this)\n \nUpdaterSignal\n - For type safety you can use signals, e.g. \nautoUpdater.signals.updateDownloaded(() => {})\n instead of \nautoUpdater.on('update-available', () => {})\n\n\n\n\nMethods\n\n\n\n\n.AppUpdater\n \u21d0 \nEventEmitter\n\n\n.checkForUpdates()\n \u21d2 \nPromise<\nUpdateCheckResult\n>\n\n\n.checkForUpdatesAndNotify()\n \u21d2 \nPromise< | \nUpdateCheckResult\n>\n\n\n.downloadUpdate(cancellationToken)\n \u21d2 \nPromise<any>\n\n\n.getFeedURL()\n \u21d2 \nundefined\n | \nnull\n | \nString\n\n\n.setFeedURL(options)\n\n\n.quitAndInstall(isSilent, isForceRunAfter)\n\n\n\n\n\n\n\n\n\n\nappUpdater.checkForUpdates()\n \u21d2 \nPromise<\nUpdateCheckResult\n>\n\n\nAsks the server whether there is an update.\n\n\n\n\nappUpdater.checkForUpdatesAndNotify()\n \u21d2 \nPromise< | \nUpdateCheckResult\n>\n\n\nAsks the server whether there is an update, download and notify if update available.\n\n\n\n\nappUpdater.downloadUpdate(cancellationToken)\n \u21d2 \nPromise<any>\n\n\nStart downloading update manually. You can use this method if \nautoDownload\n option is set to \nfalse\n.\n\n\nReturns\n: \nPromise<any>\n - Path to downloaded file.  \n\n\n\n\ncancellationToken \nCancellationToken\n\n\n\n\n\n\nappUpdater.getFeedURL()\n \u21d2 \nundefined\n | \nnull\n | \nString\n\n\n\n\nappUpdater.setFeedURL(options)\n\n\nConfigure update provider. If value is \nstring\n, \nGenericServerOptions\n will be set with value as \nurl\n.\n\n\n\n\noptions \nPublishConfiguration\n | \nString\n | \nGithubOptions\n | \nS3Options\n | \nSpacesOptions\n | \nGenericServerOptions\n | \nBintrayOptions\n - If you want to override configuration in the \napp-update.yml\n.\n\n\n\n\n\n\nappUpdater.channel\n (getter and setter)\n\n\nDefine the channel which the Auto-Updater will follow (see \nthe auto-update with channels tutorial\n) using \nappUpdater.channel = 'beta'\n or get the current channel with \ncurrentChannel = appUpdater.channel\n.\n\n\n\n\nappUpdater.quitAndInstall(isSilent, isForceRunAfter)\n\n\nRestarts the app and installs the update after it has been downloaded.\nIt should only be called after \nupdate-downloaded\n has been emitted.\n\n\nNote:\n \nautoUpdater.quitAndInstall()\n will close all application windows first and only emit \nbefore-quit\n event on \napp\n after that.\nThis is different from the normal quit event sequence.\n\n\n\n\nisSilent \nBoolean\n - \nwindows-only\n Runs the installer in silent mode. Defaults to \nfalse\n.\n\n\nisForceRunAfter \nBoolean\n - Run the app after finish even on silent install. Not applicable for macOS. Ignored if \nisSilent\n is set to \nfalse\n.\n\n\n\n\n\n\nLogger\n\u00b6\n\n\nKind\n: interface of \nelectron-updater\n\n\n\n\nlogger.debug(message)\n\n\n\n\nmessage \nString\n\n\n\n\n\n\nlogger.error(message)\n\n\n\n\nmessage \nany\n\n\n\n\n\n\nlogger.info(message)\n\n\n\n\nmessage \nany\n\n\n\n\n\n\nlogger.warn(message)\n\n\n\n\nmessage \nany\n\n\n\n\n\n\nUpdateInfo\n\u00b6\n\n\nKind\n: interface of \nelectron-updater\n\n\nProperties\n\n\n\n\nversion\n String - The version.\n\n\nfiles\n Array<module:builder-util-runtime.UpdateFileInfo>\n\n\npath\n String - Deprecated: {tag.description}\n\n\nsha512\n String - Deprecated: {tag.description}\n\n\nreleaseName\n String - The release name.\n\n\nreleaseNotes\n String | Array<module:builder-util-runtime.ReleaseNoteInfo> - The release notes. List if \nupdater.fullChangelog\n is set to \ntrue\n, \nstring\n otherwise.\n\n\nreleaseDate\n String - The release date.\n\n\nstagingPercentage\n Number - The \nstaged rollout\n percentage, 0-100.\n\n\n\n\n\n\nUpdateCheckResult\n\u00b6\n\n\nKind\n: interface of \nelectron-updater\n\n\nProperties\n\n\n\n\nupdateInfo\n module:builder-util-runtime.UpdateInfo\n\n\ndownloadPromise\n Promise<Array<String>>\n\n\ncancellationToken\n CancellationToken\n\n\nversionInfo\n module:builder-util-runtime.UpdateInfo - Deprecated: {tag.description}\n\n\n\n\n\n\nUpdaterSignal\n\u00b6\n\n\nupdaterSignal.login(handler)\n\n\nEmitted when an authenticating proxy is \nasking for user credentials\n.\n\n\n\n\nhandler - callback\n\n\n\n\nupdaterSignal.progress(handler)\n\n\n\n\nhandler - callback\n\n\n\n\nupdaterSignal.updateCancelled(handler)\n\n\n\n\nhandler - callback\n\n\n\n\nupdaterSignal.updateDownloaded(handler)\n\n\n\n\nhandler\n - callback",
            "title": "Auto Update"
        },
        {
            "location": "/auto-update/#differences-between-electron-updater-and-built-in-autoupdater",
            "text": "It doesn\u2019t require a dedicated release server.  Code signature validation not only on macOS, but also on Windows.  electron-builder produces and publishes all required metadata files and artifacts.  Download progress supported on all platforms.  Staged rollouts  supported on all platforms.  Actually, built-in autoUpdater is used inside on macOS.  Different providers supported out of the box ( GitHub Releases ,  Amazon S3 ,  DigitalOcean Spaces ,  Bintray  and generic HTTP(s) server).  You need only 2 lines of code to make it work.",
            "title": "Differences between electron-updater and built-in autoUpdater"
        },
        {
            "location": "/auto-update/#quick-setup-guide",
            "text": "Install  electron-updater  as an app dependency.    Configure publish .    Use  autoUpdater  from  electron-updater  instead of  electron :  import   {   autoUpdater   }   from   \"electron-updater\"   Or if you don\u2019t use ES6:  const { autoUpdater } = require(\"electron-updater\")    Call  autoUpdater.checkForUpdatesAndNotify() . Or, if you need custom behaviour, implement  electron-updater  events, check examples below.     Note   Do not call  setFeedURL . electron-builder automatically creates  app-update.yml  file for you on build in the  resources  (this file is internal, you don\u2019t need to be aware of it).  zip  target for macOS is  required  for Squirrel.Mac, otherwise  latest-mac.yml  cannot be created, which causes  autoUpdater  error. Default  target  for macOS is  dmg + zip , so there is no need to explicitly specify target.",
            "title": "Quick Setup Guide"
        },
        {
            "location": "/auto-update/#examples",
            "text": "Example in Typescript  using system notifications.  A  complete example  showing how to use.  An  encapsulated manual update via menu .",
            "title": "Examples"
        },
        {
            "location": "/auto-update/#debugging",
            "text": "You don\u2019t need to listen all events to understand what\u2019s wrong. Just set  logger . electron-log  is recommended (it is an additional dependency that you can install if needed).  autoUpdater . logger   =   require ( \"electron-log\" )  autoUpdater . logger . transports . file . level   =   \"info\"   Note that in order to develop/test UI/UX of updating without packaging the application you need to have a file named  dev-app-update.yml  in the root of your project, which matches your  publish  setting from electron-builder config (but in  YAML  format).",
            "title": "Debugging"
        },
        {
            "location": "/auto-update/#staged-rollouts",
            "text": "Staged rollouts allow you to distribute the latest version of your app to a subset of users that you can increase over time, similar to rollouts on platforms like Google Play.  Staged rollouts are controlled by manually editing your  latest.yml  /  latest-mac.yml  (channel update info file).  version: 1.1.0\npath: TestApp Setup 1.1.0.exe\nsha512: Dj51I0q8aPQ3ioaz9LMqGYujAYRbDNblAQbodDRXAMxmY6hsHqEl3F6SvhfJj5oPhcqdX1ldsgEvfMNXGUXBIw==\nstagingPercentage: 10  Update will be shipped to 10% of userbase.  If you want to pull a staged release because it hasn\u2019t gone well, you  must  increment the version number higher than your broken release.\nBecause some of your users will be on the broken 1.0.1, releasing a new 1.0.1 would result in them staying on a broken version.",
            "title": "Staged Rollouts"
        },
        {
            "location": "/auto-update/#file-generated-and-uploaded-in-addition",
            "text": "latest.yml  (or  latest-mac.yml  for macOS, or  latest-linux.yml  for Linux) will be generated and uploaded for all providers except  bintray  (because not required,  bintray  doesn\u2019t use  latest.yml ).",
            "title": "File Generated and Uploaded in Addition"
        },
        {
            "location": "/auto-update/#private-github-update-repo",
            "text": "You can use a private repository for updates with electron-updater by setting the  GH_TOKEN  environment variable (on user machine) and  private  option.\nIf  GH_TOKEN  is set, electron-updater will use the GitHub API for updates allowing private repositories to work.   Warning  Private GitHub provider only for  very special  cases \u2014 not intended and not suitable for all users.    Note  The GitHub API currently has a rate limit of 5000 requests per user per hour. An update check uses up to 3 requests per check.",
            "title": "Private GitHub Update Repo"
        },
        {
            "location": "/auto-update/#events",
            "text": "The  autoUpdater  object emits the following events:",
            "title": "Events"
        },
        {
            "location": "/auto-update/#event-error",
            "text": "error  Error   Emitted when there is an error while updating.",
            "title": "Event: error"
        },
        {
            "location": "/auto-update/#event-checking-for-update",
            "text": "Emitted when checking if an update has started.",
            "title": "Event: checking-for-update"
        },
        {
            "location": "/auto-update/#event-update-available",
            "text": "info   UpdateInfo  (for generic and github providers) |  VersionInfo  (for Bintray provider)   Emitted when there is an available update. The update is downloaded automatically if  autoDownload  is  true .",
            "title": "Event: update-available"
        },
        {
            "location": "/auto-update/#event-update-not-available",
            "text": "Emitted when there is no available update.   info   UpdateInfo  (for generic and github providers) |  VersionInfo  (for Bintray provider)",
            "title": "Event: update-not-available"
        },
        {
            "location": "/auto-update/#event-download-progress",
            "text": "progress  ProgressInfo  bytesPerSecond  percent  total  transferred   Emitted on progress.",
            "title": "Event: download-progress"
        },
        {
            "location": "/auto-update/#event-update-downloaded",
            "text": "info   UpdateInfo  \u2014 for generic and github providers.  VersionInfo  for Bintray provider.",
            "title": "Event: update-downloaded"
        },
        {
            "location": "/auto-update/#api",
            "text": "AppUpdater  \u21d0  EventEmitter  Logger  UpdateInfo  UpdateCheckResult  UpdaterSignal",
            "title": "API"
        },
        {
            "location": "/auto-update/#appupdater-eventemitter",
            "text": "Kind : class of  electron-updater  Extends :  EventEmitter  Properties   autoDownload  =  true  Boolean - Whether to automatically download an update when it is found.   autoInstallOnAppQuit  =  true  Boolean - Whether to automatically install a downloaded update on app quit (if  quitAndInstall  was not called before).  Applicable only on Windows and Linux.    allowPrerelease  =  false  Boolean -  GitHub provider only.  Whether to allow update to pre-release versions. Defaults to  true  if application version contains prerelease components (e.g.  0.12.1-alpha.1 , here  alpha  is a prerelease component), otherwise  false .  If  true , downgrade will be allowed ( allowDowngrade  will be set to  true ).    fullChangelog  =  false  Boolean -  GitHub provider only.  Get all release notes (from current version to latest), not just the latest.   allowDowngrade  =  false  Boolean - Whether to allow version downgrade (when a user from the beta channel wants to go back to the stable channel).  currentVersion  String - The current application version.  channel  String - Get the update channel. Not applicable for GitHub. Doesn\u2019t return  channel  from the update configuration, only if was previously set.  requestHeaders  [key: string]: string - The request headers.  logger   Logger  - The logger. You can pass  electron-log ,  winston  or another logger with the following interface:  { info(), warn(), error() } . Set it to  null  if you would like to disable a logging feature.  signals  =  new UpdaterSignal(this)   UpdaterSignal  - For type safety you can use signals, e.g.  autoUpdater.signals.updateDownloaded(() => {})  instead of  autoUpdater.on('update-available', () => {})   Methods   .AppUpdater  \u21d0  EventEmitter  .checkForUpdates()  \u21d2  Promise< UpdateCheckResult >  .checkForUpdatesAndNotify()  \u21d2  Promise< |  UpdateCheckResult >  .downloadUpdate(cancellationToken)  \u21d2  Promise<any>  .getFeedURL()  \u21d2  undefined  |  null  |  String  .setFeedURL(options)  .quitAndInstall(isSilent, isForceRunAfter)      appUpdater.checkForUpdates()  \u21d2  Promise< UpdateCheckResult >  Asks the server whether there is an update.   appUpdater.checkForUpdatesAndNotify()  \u21d2  Promise< |  UpdateCheckResult >  Asks the server whether there is an update, download and notify if update available.   appUpdater.downloadUpdate(cancellationToken)  \u21d2  Promise<any>  Start downloading update manually. You can use this method if  autoDownload  option is set to  false .  Returns :  Promise<any>  - Path to downloaded file.     cancellationToken  CancellationToken    appUpdater.getFeedURL()  \u21d2  undefined  |  null  |  String   appUpdater.setFeedURL(options)  Configure update provider. If value is  string ,  GenericServerOptions  will be set with value as  url .   options  PublishConfiguration  |  String  |  GithubOptions  |  S3Options  |  SpacesOptions  |  GenericServerOptions  |  BintrayOptions  - If you want to override configuration in the  app-update.yml .    appUpdater.channel  (getter and setter)  Define the channel which the Auto-Updater will follow (see  the auto-update with channels tutorial ) using  appUpdater.channel = 'beta'  or get the current channel with  currentChannel = appUpdater.channel .   appUpdater.quitAndInstall(isSilent, isForceRunAfter)  Restarts the app and installs the update after it has been downloaded.\nIt should only be called after  update-downloaded  has been emitted.  Note:   autoUpdater.quitAndInstall()  will close all application windows first and only emit  before-quit  event on  app  after that.\nThis is different from the normal quit event sequence.   isSilent  Boolean  -  windows-only  Runs the installer in silent mode. Defaults to  false .  isForceRunAfter  Boolean  - Run the app after finish even on silent install. Not applicable for macOS. Ignored if  isSilent  is set to  false .",
            "title": "AppUpdater \u21d0 EventEmitter"
        },
        {
            "location": "/auto-update/#logger",
            "text": "Kind : interface of  electron-updater   logger.debug(message)   message  String    logger.error(message)   message  any    logger.info(message)   message  any    logger.warn(message)   message  any",
            "title": "Logger"
        },
        {
            "location": "/auto-update/#updateinfo",
            "text": "Kind : interface of  electron-updater  Properties   version  String - The version.  files  Array<module:builder-util-runtime.UpdateFileInfo>  path  String - Deprecated: {tag.description}  sha512  String - Deprecated: {tag.description}  releaseName  String - The release name.  releaseNotes  String | Array<module:builder-util-runtime.ReleaseNoteInfo> - The release notes. List if  updater.fullChangelog  is set to  true ,  string  otherwise.  releaseDate  String - The release date.  stagingPercentage  Number - The  staged rollout  percentage, 0-100.",
            "title": "UpdateInfo"
        },
        {
            "location": "/auto-update/#updatecheckresult",
            "text": "Kind : interface of  electron-updater  Properties   updateInfo  module:builder-util-runtime.UpdateInfo  downloadPromise  Promise<Array<String>>  cancellationToken  CancellationToken  versionInfo  module:builder-util-runtime.UpdateInfo - Deprecated: {tag.description}",
            "title": "UpdateCheckResult"
        },
        {
            "location": "/auto-update/#updatersignal",
            "text": "updaterSignal.login(handler)  Emitted when an authenticating proxy is  asking for user credentials .   handler - callback   updaterSignal.progress(handler)   handler - callback   updaterSignal.updateCancelled(handler)   handler - callback   updaterSignal.updateDownloaded(handler)   handler  - callback",
            "title": "UpdaterSignal"
        },
        {
            "location": "/code-signing/",
            "text": "macOS and Windows code signing is supported. Windows is dual code-signed (SHA1 & SHA256 hashing algorithms).\n\n\nOn a macOS development machine, a valid and appropriate identity from your keychain will be automatically used.\n\n\n\n\n\n\n\n\nEnv Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCSC_LINK\n\n\nThe HTTPS link (or base64-encoded data, or \nfile://\n link, or local path) to certificate (\n*.p12\n or \n*.pfx\n file). Shorthand \n~/\n is supported (home directory).\n\n\n\n\n\n\nCSC_KEY_PASSWORD\n\n\nThe password to decrypt the certificate given in \nCSC_LINK\n.\n\n\n\n\n\n\nCSC_NAME\n\n\nmacOS-only\n Name of certificate (to retrieve from login.keychain). Useful on a development machine (not on CI) if you have several identities (otherwise don\u2019t specify it).\n\n\n\n\n\n\nCSC_IDENTITY_AUTO_DISCOVERY\n\n\ntrue\n or \nfalse\n. Defaults to \ntrue\n \u2014 on a macOS development machine valid and appropriate identity from your keychain will be automatically used.\n\n\n\n\n\n\nCSC_KEYCHAIN\n\n\nThe keychain name. Used if \nCSC_LINK\n is not specified. Defaults to system default keychain.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nIf you are building Windows on macOS and need to set a different certificate and password (than the ones set in \nCSC_*\n env vars) you can use \nWIN_CSC_LINK\n and \nWIN_CSC_KEY_PASSWORD\n.\n\n\n\n\nWindows\n\u00b6\n\n\nTo sign an app on Windows, there are two types of certificates:\n\n\n\n\nEV Code Signing Certificate\n\n\nCode Signing Certificate\n\n\n\n\nBoth certificates work with auto-update. The regular (and often cheaper) Code Signing Certificate shows a warning during installation that goes away once enough users installed your application and you\u2019ve built up trust. The EV Certificate has more trust and thus works immediately without any warnings. However, it is not possible to export the EV Certificate as it is bound to a physical USB dongle. Thus, you can\u2019t export the certificate for signing code on a CI, such as appveyor. If you are using an EV Certificate, you need to provide \nwin.certificateSubjectName\n in your electron-builder configuration.\n\n\nTravis, AppVeyor and other CI Servers\n\u00b6\n\n\nTo sign app on build server you need to set \nCSC_LINK\n, \nCSC_KEY_PASSWORD\n:\n\n\n\n\nExport\n certificate.\n Consider to not use special characters (for bash) in the password because \u201c\nvalues are not escaped when your builds are executed\n\u201d.\n\n\nEncode file to base64 (macOS: \nbase64 -i yourFile.p12 -o envValue.txt\n, Linux: \nbase64 yourFile.p12 > envValue.txt\n).\n\n\n\n\nOr upload \n*.p12\n file (e.g. on Google Drive, use \ndirect link generator\n to get correct download link).\n\n\n\n\nSet \nCSC_LINK\n and \nCSC_KEY_PASSWORD\n environment variables. See \nTravis\n or \nAppVeyor\n documentation.\n   Recommended to set it in the CI Project Settings, not in the \n.travis.yml\n/\nappveyor.yml\n. If you use link to file (not base64 encoded data), make sure to escape special characters (for bash) accordingly.\n\n\n\n\nIn case of AppVeyor, don\u2019t forget to click on lock icon to \u201cToggle variable encryption\u201d.\n\n\nKeep in mind that Windows is not able to handle enviroment variable values longer than 8192 characters, thus if the base64 representation of your certificate exceeds that limit, try re-exporting the certificate without including all the certificates in the certification path (they are not necessary, but the Certificate Manager export wizard ticks the option by default), otherwise the encoded value will be truncated.\n\n\nWhere to Buy Code Signing Certificate\n\u00b6\n\n\nSee \nGet a code signing certificate\n for Windows (platform: \u201cMicrosoft Authenticode\u201d).\nPlease note \u2014 Gatekeeper only recognises \nApple digital certificates\n.\n\n\nHow to Export Certificate on macOS\n\u00b6\n\n\n\n\nOpen Keychain.\n\n\nSelect \nlogin\n keychain, and \nMy Certificates\n category.\n\n\nSelect all required certificates (hint: use cmd-click to select several):\n\n\nDeveloper ID Application:\n to sign app for macOS.\n\n\n3rd Party Mac Developer Application:\n and \n3rd Party Mac Developer Installer:\n to sign app for MAS (Mac App Store).\n\n\nDeveloper ID Application:\n and \nDeveloper ID Installer\n to sign app and installer for distribution outside of the Mac App Store.\n\n\nMac Developer:\n to sign development builds for testing Mac App Store submissions (\nmas-dev\n target). You also need a provisioning profile in the working directory that matches this certificate and the device being used for testing.\n\n\n\n\nPlease note \u2013 you can select as many certificates as needed. No restrictions on electron-builder side.\n   All selected certificates will be imported into temporary keychain on CI server.\n4. Open context menu and \nExport\n.\n\n\nHow to Disable Code Signing During the Build Process on macOS\n\u00b6\n\n\nTo disable Code Signing when building for macOS leave all the above vars unset except for \nCSC_IDENTITY_AUTO_DISCOVERY\n which needs to be set to \nfalse\n. This can be done by running \nexport CSC_IDENTITY_AUTO_DISCOVERY=false\n. \n\n\nAnother way \u2014 set \nmac.identity\n to \nnull\n. You can pass aditional configuration using CLI as well: \n-c.mac.identity=null\n.",
            "title": "Code Signing"
        },
        {
            "location": "/code-signing/#windows",
            "text": "To sign an app on Windows, there are two types of certificates:   EV Code Signing Certificate  Code Signing Certificate   Both certificates work with auto-update. The regular (and often cheaper) Code Signing Certificate shows a warning during installation that goes away once enough users installed your application and you\u2019ve built up trust. The EV Certificate has more trust and thus works immediately without any warnings. However, it is not possible to export the EV Certificate as it is bound to a physical USB dongle. Thus, you can\u2019t export the certificate for signing code on a CI, such as appveyor. If you are using an EV Certificate, you need to provide  win.certificateSubjectName  in your electron-builder configuration.",
            "title": "Windows"
        },
        {
            "location": "/code-signing/#travis-appveyor-and-other-ci-servers",
            "text": "To sign app on build server you need to set  CSC_LINK ,  CSC_KEY_PASSWORD :   Export  certificate.\n Consider to not use special characters (for bash) in the password because \u201c values are not escaped when your builds are executed \u201d.  Encode file to base64 (macOS:  base64 -i yourFile.p12 -o envValue.txt , Linux:  base64 yourFile.p12 > envValue.txt ).   Or upload  *.p12  file (e.g. on Google Drive, use  direct link generator  to get correct download link).   Set  CSC_LINK  and  CSC_KEY_PASSWORD  environment variables. See  Travis  or  AppVeyor  documentation.\n   Recommended to set it in the CI Project Settings, not in the  .travis.yml / appveyor.yml . If you use link to file (not base64 encoded data), make sure to escape special characters (for bash) accordingly.   In case of AppVeyor, don\u2019t forget to click on lock icon to \u201cToggle variable encryption\u201d.  Keep in mind that Windows is not able to handle enviroment variable values longer than 8192 characters, thus if the base64 representation of your certificate exceeds that limit, try re-exporting the certificate without including all the certificates in the certification path (they are not necessary, but the Certificate Manager export wizard ticks the option by default), otherwise the encoded value will be truncated.",
            "title": "Travis, AppVeyor and other CI Servers"
        },
        {
            "location": "/code-signing/#where-to-buy-code-signing-certificate",
            "text": "See  Get a code signing certificate  for Windows (platform: \u201cMicrosoft Authenticode\u201d).\nPlease note \u2014 Gatekeeper only recognises  Apple digital certificates .",
            "title": "Where to Buy Code Signing Certificate"
        },
        {
            "location": "/code-signing/#how-to-export-certificate-on-macos",
            "text": "Open Keychain.  Select  login  keychain, and  My Certificates  category.  Select all required certificates (hint: use cmd-click to select several):  Developer ID Application:  to sign app for macOS.  3rd Party Mac Developer Application:  and  3rd Party Mac Developer Installer:  to sign app for MAS (Mac App Store).  Developer ID Application:  and  Developer ID Installer  to sign app and installer for distribution outside of the Mac App Store.  Mac Developer:  to sign development builds for testing Mac App Store submissions ( mas-dev  target). You also need a provisioning profile in the working directory that matches this certificate and the device being used for testing.   Please note \u2013 you can select as many certificates as needed. No restrictions on electron-builder side.\n   All selected certificates will be imported into temporary keychain on CI server.\n4. Open context menu and  Export .",
            "title": "How to Export Certificate on macOS"
        },
        {
            "location": "/code-signing/#how-to-disable-code-signing-during-the-build-process-on-macos",
            "text": "To disable Code Signing when building for macOS leave all the above vars unset except for  CSC_IDENTITY_AUTO_DISCOVERY  which needs to be set to  false . This can be done by running  export CSC_IDENTITY_AUTO_DISCOVERY=false .   Another way \u2014 set  mac.identity  to  null . You can pass aditional configuration using CLI as well:  -c.mac.identity=null .",
            "title": "How to Disable Code Signing During the Build Process on macOS"
        },
        {
            "location": "/multi-platform-build/",
            "text": "Info\n\n\nDon\u2019t expect that you can build app for all platforms on one platform.\n\n\n\n\n\n\n\n\nIf your app has native dependency, it can be compiled only on the target platform unless \nprebuild\n is not used.\n\n\nprebuild\n is a solution, but most node modules \ndon\u2019t provide\n prebuilt binaries.\n\n\n\n\n\n\nmacOS Code Signing works only on macOS. \nCannot be fixed\n.\n\n\n\n\n\n\nFree public \nElectron Build Service\n is used to build Electron app for Linux on Windows. On macOS/Linux you can build Electron app for Windows locally, except Appx for Windows Store (in the future (feel free to file issue) electron-build-service will support Appx target).\n\n\nYou can use build servers \u2014 e.g. \nTravis\n to build macOS/Linux apps and \nAppVeyor\n to build Windows app.\n\n\nBy default build for current platform and current arch. Use CLI flags \n--mac\n, \n--win\n, \n--linux\n to specify platforms. And \n--ia32\n, \n--x64\n to specify arch.\n\n\nFor example, to build app for MacOS, Windows and Linux:\n\nelectron-builder -mwl\n\n\n\nBuild performed in parallel, so, it is highly recommended to not use npm task per platform (e.g. \nnpm run dist:mac && npm run dist:win32\n), but specify multiple platforms/targets in one build command.\nYou don\u2019t need to clean dist output before build \u2014 output directory is cleaned automatically.\n\n\nSample \n.travis.yml\n to Build Electron App for macOS, Linux and Windows\n\u00b6\n\n\nsample .travis.yml\nmatrix\n:\n\n  \ninclude\n:\n\n    \n-\n \nos\n:\n \nosx\n\n      \nosx_image\n:\n \nxcode9.4\n\n      \nlanguage\n:\n \nnode_js\n\n      \nnode_js\n:\n \n\"10\"\n\n      \nenv\n:\n\n        \n-\n \nELECTRON_CACHE=$HOME/.cache/electron\n\n        \n-\n \nELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder\n\n\n    \n-\n \nos\n:\n \nlinux\n\n      \nservices\n:\n \ndocker\n\n      \nlanguage\n:\n \ngeneric\n\n\n\ncache\n:\n\n  \ndirectories\n:\n\n    \n-\n \nnode_modules\n\n    \n-\n \n$HOME/.cache/electron\n\n    \n-\n \n$HOME/.cache/electron-builder\n\n\n\nscript\n:\n\n  \n-\n \n|\n\n    \nif [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then\n\n      \ndocker run --rm \\\n\n        \n--env-file <(env | grep -iE 'DEBUG|NODE_|ELECTRON_|YARN_|NPM_|CI|CIRCLE|TRAVIS|APPVEYOR_|CSC_|_TOKEN|_KEY|AWS_|STRIP|BUILD_') \\\n\n        \n-v ${PWD}:/project \\\n\n        \n-v ~/.cache/electron:/root/.cache/electron \\\n\n        \n-v ~/.cache/electron-builder:/root/.cache/electron-builder \\\n\n        \nelectronuserland/builder:wine \\\n\n        \n/bin/bash -c \"yarn --link-duplicates --pure-lockfile && yarn release --linux --win\"\n\n    \nelse\n\n      \nyarn release\n\n    \nfi\n\n\nbefore_cache\n:\n\n  \n-\n \nrm -rf $HOME/.cache/electron-builder/wine\n\n\n\nbranches\n:\n\n  \nexcept\n:\n\n    \n-\n \n\"/^v\\\\d+\\\\.\\\\d+\\\\.\\\\d+$/\"\n\n\n\n\nSample \nappveyor.yml\n to Build Electron App for Windows\n\u00b6\n\n\nUse AppVeyor only if:\n\n you need to build AppX,\n\n or your app has native dependency and prebuilt binary is not provided.\n\n\nOtherwise see above sample \n.travis.yml\n to build Windows on Linux using provided \nDocker\n image.\n\n\nsample appveyor.yml\nimage\n:\n \nVisual Studio 2017\n\n\n\nplatform\n:\n\n  \n-\n \nx64\n\n\n\ncache\n:\n\n  \n-\n \nnode_modules\n\n  \n-\n \n'%USERPROFILE%\\.electron'\n\n\n\ninit\n:\n\n  \n-\n \ngit config --global core.autocrlf input\n\n\n\ninstall\n:\n\n  \n-\n \nps\n:\n \nInstall-Product node 8 x64\n\n  \n-\n \nyarn\n\n\n\nbuild_script\n:\n\n  \n-\n \nyarn dist\n\n\n\ntest\n:\n \noff\n\n\n\n\nmacOS\n\u00b6\n\n\nAll required system dependencies (except rpm) will be downloaded automatically on demand on macOS 10.12+ (macOS Sierra). On Travis, please add \nosx_image: xcode9.0\n (see above sample \n.travis.yml\n).\n\n\nTo build rpm: \nbrew install rpm\n (\nbrew\n).\n\n\nLinux\n\u00b6\n\n\nYou can use \nDocker\n to avoid installing system dependencies.\n\n\nTo build app in distributable format for Linux:\n\nsudo apt-get install --no-install-recommends -y libopenjp2-tools\n\n\n\nTo build rpm: \nsudo apt-get install --no-install-recommends -y rpm\n (or \nsudo yum install rpm-build\n).\n\n\nTo build pacman: \nsudo apt-get install --no-install-recommends -y bsdtar\n.\n\n\nTo build snap: \nsudo apt-get install --no-install-recommends -y snapcraft\n.\n\n\nTo build app for Windows on Linux:\n\u00b6\n\n\nDocker\n (\nelectronuserland/builder:wine\n) is recommended to avoid installing system dependencies.\n\n\n\n\nInstall Wine (2.0+ is required) \u2014 see \nWineHQ Binary Packages\n.\n\n\nInstall \nMono\n (4.2+ is required) if you want to use Squirrel.Windows (NSIS, default target, doesn\u2019t require mono).\n\n\n\n\nTo build app in 32 bit from a machine with 64 bit:\n\u00b6\n\n\nsudo apt-get install --no-install-recommends -y gcc-multilib g++-multilib\n\n\n\n\nTravis Linux\n\u00b6\n\n\nTrusty\n is required.\n\nsudo\n:\n \nrequired\n\n\ndist\n:\n \ntrusty\n\n\n\n\nTravis macOS\n\u00b6\n\n\nmacOS 10.12+\n is required.\n\nosx_image\n:\n \nxcode9.0\n\n\n\n\nDocker\n\u00b6\n\n\nTo build Linux or Windows on any platform.\n\n\n\n\nWarning\n\n\nYou cannot build for Windows using Docker if you have native dependencies and native dependency doesn\u2019t use \nprebuild\n.\n\n\n\n\nSee example Docker usage on a CI server in the \nsample .travis.yml\n.\n\n\n\n\nNote\n\n\nDo not use Docker Toolbox on macOS. Only \nDocker for Mac\n works.\n\n\n\n\nBuild Electron App using Docker on a Local Machine\n\u00b6\n\n\n\n\n\n\nRun docker container:\n\n\ndocker run --rm -ti \n\\\n\n --env-file <\n(\nenv \n|\n grep -iE \n'DEBUG|NODE_|ELECTRON_|YARN_|NPM_|CI|CIRCLE|TRAVIS_TAG|TRAVIS|TRAVIS_REPO_|TRAVIS_BUILD_|TRAVIS_BRANCH|TRAVIS_PULL_REQUEST_|APPVEYOR_|CSC_|GH_|GITHUB_|BT_|AWS_|STRIP|BUILD_'\n)\n \n\\\n\n --env \nELECTRON_CACHE\n=\n\"/root/.cache/electron\"\n \n\\\n\n --env \nELECTRON_BUILDER_CACHE\n=\n\"/root/.cache/electron-builder\"\n \n\\\n\n -v \n${\nPWD\n}\n:/project \n\\\n\n -v \n${\nPWD\n##*/\n}\n-node-modules:/project/node_modules \n\\\n\n -v ~/.cache/electron:/root/.cache/electron \n\\\n\n -v ~/.cache/electron-builder:/root/.cache/electron-builder \n\\\n\n electronuserland/builder:wine\n\n\n\n\n\n\n\n\nType in \nyarn && yarn dist\n\n\n\n\n\n\nIf you don\u2019t have \ndist\n npm script in your \npackage.json\n, call \n./node_modules/.bin/electron-builder\n directly.\n\n\nOr to avoid second step, append to first command \n/bin/bash -c \"yarn && yarn dist\"\n You can use \n/test.sh\n to install dependencies and run tests.\n\n\n\n\nTip\n\n\nIf you don\u2019t need to build Windows, use image \nelectronuserland/builder\n (wine is not installed in this image).\n\n\n\n\nProvided Docker Images\n\u00b6\n\n\n\n\nelectronuserland/builder:base\n \u2014 Required system dependencies. Not supposed to be used directly.\n\n\nelectronuserland/builder:10\n or \nbuilder\n \u2014 NodeJS 10 and required system dependencies. Based on \nbuilder:base\n. Use this image if you need to build only Linux targets.\n\n\nelectronuserland/builder:wine\n \u2014 Wine, NodeJS 10 and required system dependencies. Based on \nbuilder:10\n. Use this image if you need to build Windows targets.\n\n\nelectronuserland/builder:wine-mono\n \u2014 Mono for Squirrel.Windows. Based on \nbuilder:wine\n. Use this image if you need to build Squirrel.Windows target.\n\n\nelectronuserland/builder:wine-chrome\n \u2014 \ngoogle-chrome-stable\n and \nxvfb\n are available \u2014 you can use this image for headless testing of Electron application. Based on \nbuilder:wine\n.",
            "title": "Multi Platform Build"
        },
        {
            "location": "/multi-platform-build/#sample-travisyml-to-build-electron-app-for-macos-linux-and-windows",
            "text": "sample .travis.yml matrix : \n   include : \n     -   os :   osx \n       osx_image :   xcode9.4 \n       language :   node_js \n       node_js :   \"10\" \n       env : \n         -   ELECTRON_CACHE=$HOME/.cache/electron \n         -   ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder \n\n     -   os :   linux \n       services :   docker \n       language :   generic  cache : \n   directories : \n     -   node_modules \n     -   $HOME/.cache/electron \n     -   $HOME/.cache/electron-builder  script : \n   -   | \n     if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then \n       docker run --rm \\ \n         --env-file <(env | grep -iE 'DEBUG|NODE_|ELECTRON_|YARN_|NPM_|CI|CIRCLE|TRAVIS|APPVEYOR_|CSC_|_TOKEN|_KEY|AWS_|STRIP|BUILD_') \\ \n         -v ${PWD}:/project \\ \n         -v ~/.cache/electron:/root/.cache/electron \\ \n         -v ~/.cache/electron-builder:/root/.cache/electron-builder \\ \n         electronuserland/builder:wine \\ \n         /bin/bash -c \"yarn --link-duplicates --pure-lockfile && yarn release --linux --win\" \n     else \n       yarn release \n     fi  before_cache : \n   -   rm -rf $HOME/.cache/electron-builder/wine  branches : \n   except : \n     -   \"/^v\\\\d+\\\\.\\\\d+\\\\.\\\\d+$/\"",
            "title": "Sample .travis.yml to Build Electron App for macOS, Linux and Windows"
        },
        {
            "location": "/multi-platform-build/#sample-appveyoryml-to-build-electron-app-for-windows",
            "text": "Use AppVeyor only if:  you need to build AppX,  or your app has native dependency and prebuilt binary is not provided.  Otherwise see above sample  .travis.yml  to build Windows on Linux using provided  Docker  image.  sample appveyor.yml image :   Visual Studio 2017  platform : \n   -   x64  cache : \n   -   node_modules \n   -   '%USERPROFILE%\\.electron'  init : \n   -   git config --global core.autocrlf input  install : \n   -   ps :   Install-Product node 8 x64 \n   -   yarn  build_script : \n   -   yarn dist  test :   off",
            "title": "Sample appveyor.yml to Build Electron App for Windows"
        },
        {
            "location": "/multi-platform-build/#macos",
            "text": "All required system dependencies (except rpm) will be downloaded automatically on demand on macOS 10.12+ (macOS Sierra). On Travis, please add  osx_image: xcode9.0  (see above sample  .travis.yml ).  To build rpm:  brew install rpm  ( brew ).",
            "title": "macOS"
        },
        {
            "location": "/multi-platform-build/#linux",
            "text": "You can use  Docker  to avoid installing system dependencies.  To build app in distributable format for Linux: sudo apt-get install --no-install-recommends -y libopenjp2-tools  To build rpm:  sudo apt-get install --no-install-recommends -y rpm  (or  sudo yum install rpm-build ).  To build pacman:  sudo apt-get install --no-install-recommends -y bsdtar .  To build snap:  sudo apt-get install --no-install-recommends -y snapcraft .",
            "title": "Linux"
        },
        {
            "location": "/multi-platform-build/#to-build-app-for-windows-on-linux",
            "text": "Docker  ( electronuserland/builder:wine ) is recommended to avoid installing system dependencies.   Install Wine (2.0+ is required) \u2014 see  WineHQ Binary Packages .  Install  Mono  (4.2+ is required) if you want to use Squirrel.Windows (NSIS, default target, doesn\u2019t require mono).",
            "title": "To build app for Windows on Linux:"
        },
        {
            "location": "/multi-platform-build/#to-build-app-in-32-bit-from-a-machine-with-64-bit",
            "text": "sudo apt-get install --no-install-recommends -y gcc-multilib g++-multilib",
            "title": "To build app in 32 bit from a machine with 64 bit:"
        },
        {
            "location": "/multi-platform-build/#travis-linux",
            "text": "Trusty  is required. sudo :   required  dist :   trusty",
            "title": "Travis Linux"
        },
        {
            "location": "/multi-platform-build/#travis-macos",
            "text": "macOS 10.12+  is required. osx_image :   xcode9.0",
            "title": "Travis macOS"
        },
        {
            "location": "/multi-platform-build/#docker",
            "text": "To build Linux or Windows on any platform.   Warning  You cannot build for Windows using Docker if you have native dependencies and native dependency doesn\u2019t use  prebuild .   See example Docker usage on a CI server in the  sample .travis.yml .   Note  Do not use Docker Toolbox on macOS. Only  Docker for Mac  works.",
            "title": "Docker"
        },
        {
            "location": "/multi-platform-build/#build-electron-app-using-docker-on-a-local-machine",
            "text": "Run docker container:  docker run --rm -ti  \\ \n --env-file < ( env  |  grep -iE  'DEBUG|NODE_|ELECTRON_|YARN_|NPM_|CI|CIRCLE|TRAVIS_TAG|TRAVIS|TRAVIS_REPO_|TRAVIS_BUILD_|TRAVIS_BRANCH|TRAVIS_PULL_REQUEST_|APPVEYOR_|CSC_|GH_|GITHUB_|BT_|AWS_|STRIP|BUILD_' )   \\ \n --env  ELECTRON_CACHE = \"/root/.cache/electron\"   \\ \n --env  ELECTRON_BUILDER_CACHE = \"/root/.cache/electron-builder\"   \\ \n -v  ${ PWD } :/project  \\ \n -v  ${ PWD ##*/ } -node-modules:/project/node_modules  \\ \n -v ~/.cache/electron:/root/.cache/electron  \\ \n -v ~/.cache/electron-builder:/root/.cache/electron-builder  \\ \n electronuserland/builder:wine    Type in  yarn && yarn dist    If you don\u2019t have  dist  npm script in your  package.json , call  ./node_modules/.bin/electron-builder  directly.  Or to avoid second step, append to first command  /bin/bash -c \"yarn && yarn dist\"  You can use  /test.sh  to install dependencies and run tests.   Tip  If you don\u2019t need to build Windows, use image  electronuserland/builder  (wine is not installed in this image).",
            "title": "Build Electron App using Docker on a Local Machine"
        },
        {
            "location": "/multi-platform-build/#provided-docker-images",
            "text": "electronuserland/builder:base  \u2014 Required system dependencies. Not supposed to be used directly.  electronuserland/builder:10  or  builder  \u2014 NodeJS 10 and required system dependencies. Based on  builder:base . Use this image if you need to build only Linux targets.  electronuserland/builder:wine  \u2014 Wine, NodeJS 10 and required system dependencies. Based on  builder:10 . Use this image if you need to build Windows targets.  electronuserland/builder:wine-mono  \u2014 Mono for Squirrel.Windows. Based on  builder:wine . Use this image if you need to build Squirrel.Windows target.  electronuserland/builder:wine-chrome  \u2014  google-chrome-stable  and  xvfb  are available \u2014 you can use this image for headless testing of Electron application. Based on  builder:wine .",
            "title": "Provided Docker Images"
        }
    ]
}